
Перем мПользовательДляСохраненияХранилищеНастроек Экспорт;
Перем мИмяФайлаКомпоненты Экспорт;
Перем ЧитатьВСоответствие Экспорт;

#Область СлужебныеФункцииИПроцедуры

Процедура СообщитьОбОшибкеОбработки(ТекстСообщения) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
		
КонецПроцедуры

Процедура СохранитьВнешнуюКомпонентуВКаталог() Экспорт
	
	СохранитьКаталогВХранилищеНастроек();
	
	СодержимоеМакета = ПолучитьМакет("КомпонентаПодключения");
	ПолныйПутьФайлаСохранения = ПолучитьИмяФайлаВнешнойКомпоненты();
	СодержимоеМакета.Записать(ПолныйПутьФайлаСохранения);
	
КонецПроцедуры

Процедура СохранитьКаталогВХранилищеНастроек() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПутьКФайлуКриптографии",ПутьКФайлуКриптографии);
	Настройки.Вставить("ТестовыйРежим",ТестовыйРежим);
	Настройки.Вставить("ИННВыбраннойОрганизации",ИННВыбраннойОрганизации);
	
	ПараметрыНастроек = ПараметрыХранилищеНастроек();
	ХранилищеОбщихНастроек.Сохранить(ПараметрыНастроек.КлючОбъекта,ПараметрыНастроек.КлючНастроек,Настройки,,мПользовательДляСохраненияХранилищеНастроек);
	
КонецПроцедуры

Процедура СохранитьЛогинПарольВХранилище()
	
	ПараметрыНастроек = ПараметрыХранилищеНастроек();
	Настройки = ХранилищеОбщихНастроек.Загрузить(ПараметрыНастроек.КлючОбъекта,ПараметрыНастроек.КлючНастроек,,мПользовательДляСохраненияХранилищеНастроек);
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	Настройки.Вставить("ИмяПользователя",ИмяПользователя);
	Настройки.Вставить("ПарольПользователя",ПарольПользователя);
	ХранилищеОбщихНастроек.Сохранить(ПараметрыНастроек.КлючОбъекта,ПараметрыНастроек.КлючНастроек,Настройки,,мПользовательДляСохраненияХранилищеНастроек);	
	
КонецПроцедуры
 
Функция ПараметрыХранилищеНастроек() Экспорт
	
	Возврат Новый Структура("КлючОбъекта,КлючНастроек","Обработка_Интеграции_HippoUz","НастройкиКаталогаХраненияКомпоненты");
	
КонецФункции

Функция ПараметрыХранилищеНастроекАрхивСчетФактур() Экспорт
	
	Возврат Новый Структура("КлючОбъекта,КлючНастроек","Обработка_Интеграции_HippoUz","АрхивСчетФактурЭДО");
	
КонецФункции

Функция ПолучитьИмяФайлаВнешнойКомпоненты()
	
	Возврат ПутьКФайлуКриптографии+"\e-imzo-component.jar";
	
КонецФункции

Функция ПолучитьИмяФайлаНастроекОрганизации()
	
	Возврат ПутьКФайлуКриптографии+"\orgSettings."+ТипФайлаДляСохраненияДанных();
	
КонецФункции

Функция ПолучитьИмяФайлаТокеновОрганизаций()
	
	Возврат ПутьКФайлуКриптографии + "\cert_keys." + ТипФайлаДляСохраненияДанных();
	
КонецФункции

Функция ПолучитьИмяФайлаТокеновСервера()
	
	Возврат ПутьКФайлуКриптографии + "\hippo_keys." + ТипФайлаДляСохраненияДанных();
	
КонецФункции

Процедура ИнициализироватьНастройкиПользователья() Экспорт
	
	ПараметрыНастроек = ПараметрыХранилищеНастроек(); 
	Настройки = ХранилищеОбщихНастроек.Загрузить(ПараметрыНастроек.КлючОбъекта,ПараметрыНастроек.КлючНастроек,,мПользовательДляСохраненияХранилищеНастроек);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Настройки);
	КонецЕсли; 
	
КонецПроцедуры

Функция ВСтрокеТолькоЦифры(Строка)
	
	Результат = Истина;
	
	КодСимвола0 = КодСимвола("0");
	КодСимвола9 = КодСимвола("9");
	
	ДлинаСтроки = СтрДлина(Строка);
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		КодСимвола = КодСимвола(Строка, Сч);
		
		Если КодСимвола < КодСимвола0
			Или КодСимвола > КодСимвола9 Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция ТипФайлаДляСохраненияДанных()
	
	Возврат "json";
	
КонецФункции

Функция ТипФайлаДляВыполненияКоманды()
	
	Возврат "bat";
	
КонецФункции
 
Процедура СохранитьДанныеОрганизацииВФайлПоПолюИНН(ИНН,Сертификат)
	
	ИмяФайла = ИНН+"."+ТипФайлаДляСохраненияДанных();
	СодержимоеФайла = ЗаписатьДанныеПолучитьJSON(Сертификат);
	ПутьХраненияФайла = ПутьКФайлуКриптографии+"\"+ИмяФайла;
	ЗаписатьСодержимоеВФайл(СодержимоеФайла,ПутьХраненияФайла);
	
КонецПроцедуры

Функция ПолучитьДанныеСФайлаПоИНН(ИНН)
	
	ИмяФайла = ИНН+"."+ТипФайлаДляСохраненияДанных();
	ПутьХраненияФайла = ПутьКФайлуКриптографии+"\"+ИмяФайла;
	РезультатJSON = ПрочитатьСодержимоеФайла(ПутьХраненияФайла);
	Возврат ПрочитатьДанныеJSON(РезультатJSON);
	
КонецФункции

Функция СуществуетРеквизитВСсылкеОбъекта(СсылкаОбъекта,ИмяРеквизита)
	
	МетаданныеСсылки = СсылкаОбъекта.Метаданные();
	РеквизитыСсылки = МетаданныеСсылки.Реквизиты;
	Если РеквизитыСсылки.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьДатуИзФормата(Дата)
	
	ДатаВФормате = Стрзаменить(Дата,"T","");
	ДатаВФормате = Стрзаменить(ДатаВФормате,".","");
	ДатаВФормате = Стрзаменить(ДатаВФормате,"-","");
	ДатаВФормате = Стрзаменить(ДатаВФормате,":","");
	
	Возврат Дата(ДатаВФормате);
	
КонецФункции
 
Функция ПолучитьДатуИзСтрокиОбработки(ДатаСтрокой) Экспорт
	
	Год = 1;
	Месяц = 1;
	День = 1;
	Час = 1;
	Минута = 1;
	Секунда = 1;
	МассивДатаВСекундах = РазложитьСтрокуВМассивСлов(ДатаСтрокой," ");
	Если МассивДатаВСекундах.Количество() > 1 Тогда
		ЧасМинутаСекунда = РазложитьСтрокуВМассивСлов(МассивДатаВСекундах[1],":"); 
		Час = Число(ЧасМинутаСекунда[0]);Час = Минута(ЧасМинутаСекунда[1]);Час = Секунда(ЧасМинутаСекунда[2]);
	КонецЕсли; 
	
	ГодМесяцДень = РазложитьСтрокуВМассивСлов(МассивДатаВСекундах[0],"-");
	Год = Число(ГодМесяцДень[0]);Месяц = Число(ГодМесяцДень[1]);День = Число(ГодМесяцДень[2]);
	
	Возврат Дата(Год,Месяц,День,Час,Минута,Секунда);
	
КонецФункции

Функция ВидыКоличествоСтраницДляПолученияДанных() Экспорт
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(10);
	МассивСтраниц.Добавить(25);
	МассивСтраниц.Добавить(50);
	МассивСтраниц.Добавить(75);
	МассивСтраниц.Добавить(100);
	
	Возврат МассивСтраниц;
	
КонецФункции

Функция ПолучитьВидСчетФактуры(ТекущаяСтраница) Экспорт
	
	СоответствиеТиповСчетФактур = Новый Соответствие;
	СоответствиеТиповСчетФактур.Вставить(1,"customer");
	СоответствиеТиповСчетФактур.Вставить(2,"executor");
	СоответствиеТиповСчетФактур.Вставить(3,"drafts");
	Возврат СоответствиеТиповСчетФактур[ТекущаяСтраница];
	
КонецФункции
 
Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	МодульЗначенияПеременныхКлиентПовтИсп = Вычислить("ЗначенияПеременныхКлиентПовтИсп");
	НайденноеЗначение = Неопределено;
	глОбщиеЗначения = МодульЗначенияПеременныхКлиентПовтИсп.ПолучитьОбщиеЗначенияДоступныеНаКлиенте();
	глОбщиеЗначения.Свойство("глТекущийПользователь", НайденноеЗначение);
	
	МодульУправлениеПользователями = Вычислить("УправлениеПользователями");
	Возврат МодульУправлениеПользователями.ПолучитьЗначениеПоУмолчанию(НайденноеЗначение, "ОсновнаяОрганизация");
	
КонецФункции

Функция ПолучитьСтрокуBASE64(СтрокаДляПреобразования) Экспорт

	ИмяВременногоХранилища = ПолучитьИмяВременногоФайла(ТипФайлаДляСохраненияДанных());
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаДляПреобразования);
	ТекстовыйДокумент.Записать(ИмяВременногоХранилища,КодировкаТекста.UTF8);
	Результат = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоХранилища));
	Если НЕ ПустаяСтрока(Результат) Тогда
		УдалитьФайлы(ИмяВременногоХранилища);
	КонецЕсли; 
	Результат = УдалитьСимволыСтроки(Результат);
	Результат = Сред(Результат,5,СтрДлина(Результат));
	Возврат Результат;
	
	//Возврат ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(СтрокаДляПреобразования));
	
КонецФункции

Функция ПолучитьВидДокументПоНомеруСтроки(НомерСтроки) Экспорт
	
	Макет 			  		= ПолучитьМакет("СписокДокументовДляОтправки");
	ОбластьДокументов 		= Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Результат  	  	  = СокрЛП(ОбластьДокументов.Область(НомерСтроки, 1).Текст);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТипДокументПоНомеруСтроки(НомерСтроки) Экспорт
	
	Макет 			  		= ПолучитьМакет("СписокДокументовДляОтправки");
	ОбластьДокументов 		= Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Результат  	  	  = СокрЛП(ОбластьДокументов.Область(НомерСтроки, 2).Текст);
	Возврат Результат;
	
КонецФункции

Функция ВидДокументаСчетФактуры() Экспорт
	
	Возврат "Счет-фактуры";
	
КонецФункции

Функция ВидДокументаСчетФактурыЭДО() Экспорт
	
	Возврат "invoice";
	
КонецФункции
 
Процедура ЗаполнитьСписокВыбораВидДокументДляОтправки(СписокВыбора) Экспорт
	
	СписокВыбора.Добавить(ВидДокументаСчетФактурыЭДО(),ВидДокументаСчетФактуры());
	СписокВыбора.Добавить("contracts","Договоры");
	СписокВыбора.Добавить("empowerment","Доверенность");
	СписокВыбора.Добавить("waybills","Товарно-транспортные накладные");
	СписокВыбора.Добавить("verification-acts","Акт сверки");
	СписокВыбора.Добавить("acts","Aкт");
	
КонецПроцедуры

Функция СтатусПодписан() Экспорт
	
	Возврат "Подписан";
	
КонецФункции

Функция СтатусНеОтправлено() Экспорт
	
	Возврат "Не отправлено";
	
КонецФункции

Функция СтатусЧерновик() Экспорт
	
	Возврат "Черновик";
	
КонецФункции

Функция ДокументПолеТабличнойЧастиАрхива() Экспорт
	
	Возврат "Документ";
	
КонецФункции
 
#КонецОбласти

#Область РаботаСКриптографией

Процедура ПервоначальныйЗапусПрограммы(ЗапуститьЕщеРаз=Истина) Экспорт
	
	// Выбор сертификата оставили пользователью
	// поэтому пока отключаем эту процедуру
	//Возврат;
	
	ОтветКомпоненты = ВыполнитьКомандуСНастройками("ПолучитьСписокСертификатов");
	Если НЕ ОтветКомпоненты.Свойство("success") Тогда
		
		СообщитьОбОшибкеОбработки(ОтветКомпоненты.Ошибка);
		Возврат;
		
	ИначеЕсли ОтветКомпоненты.Success Тогда
		
		//ОбработатьСписокСертификатов();
		
	ИначеЕсли ЗапуститьЕщеРаз = Неопределено Тогда 
		
		Возврат;
		
	ИначеЕсли Найти(ОтветКомпоненты.reason,"API-key") > 0 Тогда
		
		ВыполнитьКомандуСНастройками("УстановитьКлючАвторизации");
		ПервоначальныйЗапусПрограммы(Неопределено);
		
	КонецЕсли; 
	
	
КонецПроцедуры
 
Функция ВыполнитьКоманду(СтрокаДляВыполнения,Результат)
	
	СтрокаДляВыполнения = СтрокаДляВыполнения+" > """+Результат+"""";
	СтрокаДляВыполнения = УдалитьСимволыСтроки(СтрокаДляВыполнения);
	БатФайл = ПолучитьИмяВременногоФайла(ТипФайлаДляВыполненияКоманды());
	
	ЗаписатьСодержимоеВФайл(СтрокаДляВыполнения,БатФайл,КодировкаТекста.OEM);
	
	КомандаВыполненаУспешно = Ложь;
	WSShell = Новый COMОбъект("WScript.Shell");
	
	Попытка
		//ВремФайл = ПолучитьИмяВременногоФайла(ТипФайлаДляВыполненияКоманды());
		//ЗаписатьСодержимоеВФайл(СтрокаДляВыполнения,ВремФайл);
		//ЗапуститьПриложение(,,Истина,);
		ДД = Новый ДвоичныеДанные(БатФайл);
		BATFile = ПолучитьИмяВременногоФайла(".bat");
		ДД.Записать(BATFile);
		Рез = WSShell.Run(БатФайл, 0, Истина);
		КомандаВыполненаУспешно = Истина;
		
	Исключение
	КонецПопытки;
	
	УдалитьФайлы(БатФайл);
	
	Возврат КомандаВыполненаУспешно;
	
КонецФункции

Функция ПолучитьСтруктуруЗапросаПоУсловию(Условие) Экспорт
	
	Результат = Неопределено;
	Если ВРег(Условие) = "УСТАНОВИТЬКЛЮЧАВТОРИЗАЦИИ" Тогда
		Результат = СтруктураПолейДляАвторизации();
	ИначеЕсли ВРег(Условие) = "ПОЛУЧИТЬСПИСОКСЕРТИФИКАТОВ" Тогда
		Результат = СтруктураПолейПолученияСписокСертификатов();
	ИначеЕсли ВРег(Условие) = "ПОЛУЧИТЬТОКЕНПОКЛЮЧУ" Тогда
		Результат = СтруктураПолейПолученияТокенСертификата();
	ИначеЕсли ВРег(Условие) = "ЗАРЕГИСТРИРОВАТЬТОКЕН" Тогда
		Результат = СтруктураПолейРегистрированияТокена();
	ИначеЕсли ВРег(Условие) = "СОЗДАТЬДОКУМЕНТPKCS7" Тогда
		Результат = СтруктураПолейСоздагиеpkcs7();
	ИначеЕсли ВРег(Условие) = "ПРИКРЕПИТЬВРЕМЕННУЮМЕТКУ" Тогда
		Результат = СтруктураПолейВременнойМетки();
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьКомандуСНастройками(Условие,ПараметрыДляПолучения=Неопределено) Экспорт
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапросаПоУсловию(Условие);
	
	Если ТипЗнч(ПараметрыДляПолучения) = Тип("Структура") Тогда
		
		Если ВРег(Условие) = "ЗАРЕГИСТРИРОВАТЬТОКЕН" Тогда
			
			Аргументы = Новый Массив;
			Аргументы.Добавить(ПараметрыДляПолучения.Токен);
			СтруктураЗапроса.arguments = Аргументы;
			
		ИначеЕсли ВРег(Условие) = "ПОЛУЧИТЬТОКЕНПОКЛЮЧУ" Тогда
			
			ИНН = ПараметрыДляПолучения.ИНН;
			СодержимоеСертификата = ПолучитьДанныеСФайлаПоИНН(ИНН);
			
			Аргументы = Новый Массив;
			Для каждого КлючЗначение Из СодержимоеСертификата Цикл
				Аргументы.Добавить(КлючЗначение.Значение);
			КонецЦикла; 
			
			СтруктураЗапроса.arguments = Аргументы;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыДляПолучения) = Тип("Массив") Тогда	
		
		Если ВРег(Условие) = "СОЗДАТЬДОКУМЕНТPKCS7"
			ИЛИ ВРег(Условие) = "ПРИКРЕПИТЬВРЕМЕННУЮМЕТКУ" Тогда
			
			СтруктураЗапроса.arguments = ПараметрыДляПолучения;
				
		КонецЕсли; 
		
	КонецЕсли; 
	
	СтруктураЗапросаJSON = ЗаписатьДанныеПолучитьJSON(СтруктураЗапроса);
	РезультатВыполненияКомпоненты = ВыполнитьКомандуУказавФайлы(СтруктураЗапросаJSON);
	Попытка 
		Результат = ПрочитатьДанныеJSON(РезультатВыполненияКомпоненты);
	Исключение
		Результат = Новый Структура("Ошибка",РезультатВыполненияКомпоненты);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗарегистрироватьТокенСертификата() Экспорт
	
	Результат = ВыполнитьКомандуСНастройками("ПолучитьТокенПоКлючу",Новый Структура("ИНН",ИННВыбраннойОрганизации));
	Если Результат.Свойство("success") И Результат.success Тогда
		
		Токен = Результат.keyId;
		
	ИначеЕсли Результат.Свойство("reason") Тогда
		Если Найти(Результат.reason,"API-key") > 0 Тогда
			ВыполнитьКомандуСНастройками("УстановитьКлючАвторизации");
			Возврат ПолучитьЗарегистрироватьТокенСертификата();
		КонецЕсли; 
		СообщитьОбОшибкеОбработки(Результат.reason);
		Возврат "";
	Иначе
		Возврат "";
	КонецЕсли; 
	
	ИзменитьСоздатьТокенВоВременныйФайл("КлючКриптографии",Токен);
	
	Если ЗарегистрироватьТокен(Токен) Тогда
		 Возврат Токен;
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции

Процедура ИзменитьСоздатьТокенВоВременныйФайл(ТипТокена,Токен)
	
	Токены = Новый Структура;
	ПолныйПутьФайлаТокеновОрганизаций = ПолучитьИмяФайлаТокеновОрганизаций();
	Если ВРЕГ(ТипТокена) = "КЛЮЧСЕРВЕРАЭДО" Тогда
		ПолныйПутьФайлаТокеновОрганизаций = ПолучитьИмяФайлаТокеновСервера();
	КонецЕсли; 
	
	Если ПроверкаСуществованияФайла(ПолныйПутьФайлаТокеновОрганизаций) Тогда
		СодержимоеФайла = ПрочитатьСодержимоеФайла(ПолныйПутьФайлаТокеновОрганизаций);
		Токены = ПрочитатьДанныеJSON(СодержимоеФайла);
	КонецЕсли; 
	
	СтруктураТокена = Новый Структура("Токен,Дата",Токен,ТекущаяДата());
	
	Токены.Вставить("м"+ИННВыбраннойОрганизации,СтруктураТокена);
	ТокеныJSON = ЗаписатьДанныеПолучитьJSON(Токены);
	ЗаписатьСодержимоеВФайл(ТокеныJSON,ПолныйПутьФайлаТокеновОрганизаций);
	
КонецПроцедуры

Функция ПолучитьТокенИНН(ТипТокена,ВключитьДату=Ложь) Экспорт
	
	Если ПустаяСтрока(ИННВыбраннойОрганизации) Тогда
		Возврат "";
	КонецЕсли; 
	
	ПолныйПутьФайлаТокеновОрганизаций = ПолучитьИмяФайлаТокеновОрганизаций();
	Если ВРЕГ(ТипТокена) = "КЛЮЧСЕРВЕРАЭДО" Тогда
		ПолныйПутьФайлаТокеновОрганизаций = ПолучитьИмяФайлаТокеновСервера();
	КонецЕсли; 
	
	Токен = "";
	Если ПроверкаСуществованияФайла(ПолныйПутьФайлаТокеновОрганизаций) Тогда
		СодержимоеФайла = ПрочитатьСодержимоеФайла(ПолныйПутьФайлаТокеновОрганизаций);
		Токены = ПрочитатьДанныеJSON(СодержимоеФайла);
		
		СтруктураТокена = Токены["м"+ИННВыбраннойОрганизации];
		Если ВключитьДату Тогда
			Возврат СтруктураТокена;
		КонецЕсли; 
		
		Токен = СтруктураТокена.Токен;
	КонецЕсли; 
	
	Возврат Токен;
	
КонецФункции

Функция ЗарегистрироватьТокен(Токен) Экспорт
	
	Результат = ВыполнитьКомандуСНастройками("ЗарегистрироватьТокен",Новый Структура("Токен",Токен));
	Возврат Результат.Свойство("success") И Результат.success;
	
КонецФункции
 
Функция ВыполнитьКомандуУказавФайлы(СтруктураЗапросаJSON) Экспорт
	
	ТипФайла = ТипФайлаДляСохраненияДанных();
	ИмяВходногоФайла = ПолучитьИмяВременногоФайла(ТипФайла);
	Результат = ПолучитьИмяВременногоФайла(ТипФайла);

	ЗаписатьСодержимоеВФайл(СтруктураЗапросаJSON,ИмяВходногоФайла);	
	СтрокаДляВыполнения = ПолучитьКомандуСтрокой(ИмяВходногоФайла);
	
	КомандаВыполненаУспешно = ВыполнитьКоманду(СтрокаДляВыполнения,Результат);
	Если КомандаВыполненаУспешно Тогда
		СодержимоеФайлаДляОбработки = ПрочитатьСодержимоеФайла(Результат);
		УдалитьФайлы(ИмяВходногоФайла);
		УдалитьФайлы(Результат);
		Возврат СодержимоеФайлаДляОбработки;
	КонецЕсли; 
	
	Попытка
		УдалитьФайлы(ИмяВходногоФайла);
	Исключение
	    СообщитьОбОшибкеОбработки(ОписаниеОшибки());
	КонецПопытки; 
	
	Возврат "";
	
КонецФункции

Функция ПолучитьКомандуСтрокой(ИмяФайлаВходныхДанных)
	
	КомандаЗапусаКомпоненты = "java -jar";
	ПолноеИмяФайла = ПолучитьИмяФайлаВнешнойКомпоненты();
	Возврат КомандаЗапусаКомпоненты + 
		" """ + 
		ПолноеИмяФайла + 
		""" """ + 
		ИмяФайлаВходныхДанных+"""";
	
КонецФункции

Процедура ПрикрепитьКлючи() Экспорт
	
	ИмяСправочникаОрганизация = ПолучитьИмяСправочникОрганизации(); 
	Если ПустаяСтрока(ИмяСправочникаОрганизация) Тогда
		СообщитьОбОшибкеОбработки("Справочник ""Организация"" не обнаружено");
	КонецЕсли; 
	
	ИНН = "";
	РеквизитыСправочникОрганизации = Метаданные.Справочники.Организации.Реквизиты;
	Если РеквизитыСправочникОрганизации.Найти("ИНН") <> Неопределено Тогда
		ИНН = "ИНН";
	ИначеЕсли РеквизитыСправочникОрганизации.Найти("ИННОрганизации") <> Неопределено Тогда
		ИНН = "ИННОрганизации";
	Иначе
		Возврат;
	КонецЕсли; 
	
	ЗапросПоОрганизациям = Новый Запрос(
	"Выбрать СправочникСсылка."+ИНН+" КАК ИНН,СправочникСсылка.Ссылка КАК Организация Из Справочник."+ИмяСправочникаОрганизация+" КАК СправочникСсылка");
	
	Выборка = ЗапросПоОрганизациям.Выполнить().Выбрать();
	
	МассивКлючейОрганизации = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ПрикрепитьОрганизациюККлючу(МассивКлючейОрганизации,Выборка.Организация,Выборка.ИНН);
		
	КонецЦикла; 
	
	СодержимоеФайла = ЗаписатьДанныеПолучитьJSON(МассивКлючейОрганизации);
	ЗаписатьСодержимоеВФайл(СодержимоеФайла,ПолучитьИмяФайлаНастроекОрганизации());
	
	
КонецПроцедуры
 
Процедура ПрикрепитьОрганизациюККлючу(МассивКлючейОрганизации,Организация,ИНН)
	
	ИмяФайла = "";
	Если ПроверкаСуществованияФайлаПоИНН(ИНН,ИмяФайла) Тогда
		
		УИДОрганизации = Строка(Организация.УникальныйИдентификатор());
		
		СтруктураКлюча = Новый Структура("uid,fileName",УИДОрганизации,ИмяФайла);
		МассивКлючейОрганизации.Добавить(СтруктураКлюча);
		
	КонецЕсли; 
	
КонецПроцедуры
 
#Область ФункцииПроцедурыЗапросов

Функция СтруктураПолейДляАвторизации()
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("name","apikey");
	МассивАргументов = Новый Массив;
	МассивАргументов.Добавить("localhost");
	МассивАргументов.Добавить("96D0C1491615C82B9A54D9989779DF825B690748224C2B04F500F370D51827CE2644D8D4A82C18184D73AB8530BB8ED537269603F61DB0D03D2104ABF789970B");
	МассивАргументов.Добавить("127.0.0.1");
	МассивАргументов.Добавить("A7BCFA5D490B351BE0754130DF03A068F855DB4333D43921125B9CF2670EF6A40370C646B90401955E1F7BC9CDBF59CE0B2C5467D820BE189C845D0B79CFC96F");
	МассивАргументов.Добавить("null");
	МассивАргументов.Добавить("E0A205EC4E7B78BBB56AFF83A733A1BB9FD39D562E67978CC5E7D73B0951DB1954595A20672A63332535E13CC6EC1E1FC8857BB09E0855D7E76E411B6FA16E9D");
	СтруктураЗапроса.Вставить("arguments",МассивАргументов);
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция СтруктураПолейПолученияСписокСертификатов()
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("plugin","pfx");
	СтруктураЗапроса.Вставить("name","list_all_certificates");
	
	Возврат СтруктураЗапроса;
	
КонецФункции
 
Функция СтруктураПолейПолученияТокенСертификата()
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("plugin","pfx");
	СтруктураЗапроса.Вставить("name","load_key");
	СтруктураЗапроса.Вставить("arguments","");
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция СтруктураПолейРегистрированияТокена()
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("plugin","pfx");
	СтруктураЗапроса.Вставить("name","verify_password");
	СтруктураЗапроса.Вставить("arguments","");
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция СтруктураПолейСоздагиеpkcs7()
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("plugin","pkcs7");
	СтруктураЗапроса.Вставить("name","create_pkcs7");
	СтруктураЗапроса.Вставить("arguments","");
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция СтруктураПолейВременнойМетки()
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("plugin","pkcs7");
	СтруктураЗапроса.Вставить("name","attach_timestamp_token_pkcs7");
	СтруктураЗапроса.Вставить("arguments","");
	
	Возврат СтруктураЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПодписатьЭДО

#Если Клиент Тогда
     	
Процедура ПолучитьПодписатьКлючКомпоненты(ТокенДляПодписанияДокументов) Экспорт
	
	ОткрытьФормуДляВыбораСертификата(ТокенДляПодписанияДокументов);
	
КонецПроцедуры

Процедура ОткрытьФормуДляВыбораСертификата(ТокенДляПодписанияДокументов)
	
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.HippoUz_Интеграция_версия_1_0.Форма.ФормаВыборСертификата");
		
	Если Результат = Неопределено ИЛИ НЕ ТипЗнч(Результат) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли; 
	
	ПолучитьЗарегистрировать(Результат,ТокенДляПодписанияДокументов);
		
КонецПроцедуры

Процедура ПолучитьЗарегистрировать(СодержимоеСертификатаСтрокой,ТокенДляПодписанияДокументов)
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапросаПоУсловию("ПолучитьТокенПоКлючу");
	
	СодержимоеСертификата = ПрочитатьДанныеJSON(СодержимоеСертификатаСтрокой);
	
	Аргументы = Новый Массив;
	Для каждого КлючЗначение Из СодержимоеСертификата Цикл
		Аргументы.Добавить(КлючЗначение.Значение);
	КонецЦикла; 
	
	СтруктураЗапроса.arguments = Аргументы;
	
	СтруктураЗапросаJSON = ЗаписатьДанныеПолучитьJSON(СтруктураЗапроса);
	
	РезультатВыполненияJSON = ВыполнитьКомандуУказавФайлы(СтруктураЗапросаJSON);
	РезультатВыполнения = ПрочитатьДанныеJSON(РезультатВыполненияJSON);
	
	Если НЕ РезультатВыполнения.success Тогда
		СообщитьОбОшибкеОбработки(РезультатВыполнения.reason);
		Возврат;
	КонецЕсли; 
	
	Токен = РезультатВыполнения.keyId;
	Если НЕ ЗарегистрироватьТокен(Токен) Тогда
		СообщитьОбОшибкеОбработки("Не удалось проверить пароль");
		Возврат;
	КонецЕсли;
	
	ТокенДляПодписанияДокументов = Токен;
	
КонецПроцедуры

Процедура СоздатьДокументpkcs7(ТокенДляПодписанияДокументов,ЗначениеКонтентаСтрокой) Экспорт
	
	ЗначениеКонтентаСтрокой = УдалитьСимволыСтроки(ЗначениеКонтентаСтрокой);
	Результатpkcs7 = ПолучитьСтрокуBASE64(ЗначениеКонтентаСтрокой);
	Если ПустаяСтрока(Результатpkcs7) Тогда
		Возврат;
	КонецЕсли; 
	
	Аргументы = ПолучитьАргументыДляpkcs7(ТокенДляПодписанияДокументов,Результатpkcs7);
	
	РезультатПодписанияpkcs7 = ВыполнитьКомандуСНастройками("СоздатьДокументpkcs7",Аргументы);
	Если НЕ РезультатПодписанияpkcs7.Свойство("success") Тогда
		СообщитьОбОшибкеОбработки(РезультатПодписанияpkcs7.Ошибка);
		Возврат;
	ИначеЕсли НЕ РезультатПодписанияpkcs7.success Тогда
		СообщитьОбОшибкеОбработки(РезультатПодписанияpkcs7.reason);
		Возврат;
	КонецЕсли;
	
	Документ64 = РезультатПодписанияpkcs7.pkcs7_64;
	СерияНомерДокумента = РезультатПодписанияpkcs7.signer_serial_number;
	ШифрованнаяСтрока = РезультатПодписанияpkcs7.signature_hex;
	ПрикрепитьВременнуюМетку(Документ64,СерияНомерДокумента,ШифрованнаяСтрока);
	
КонецПроцедуры

Процедура ПрикрепитьВременнуюМетку(Документ64,СерияНомерДокумента,ШифрованнаяСтрока)
	
	ДополнительныеПараметры = Новый Структура("Токен",ПолучитьТокенИНН("КлючСервераЭДО"));
	РезультатЗапроса = ОбработатьЗапрос("ПрикрепитьВременнуюМетку",ДополнительныеПараметры,ШифрованнаяСтрока);
	
	Если НЕ РезультатЗапроса.КодСостояния = 200 Тогда
		СообщитьОбОшибкеОбработки(РезультатЗапроса.СообщениеОбОшибке);
		Возврат;
	КонецЕсли; 
	
	Содержание = РезультатЗапроса.Содержимое;
	
	ПрикрепитьВременнуюМеткуКриптографией(Документ64,СерияНомерДокумента,Содержание);
	
КонецПроцедуры

Процедура ПрикрепитьВременнуюМеткуКриптографией(Документ64,СерияНомерДокумента,ШифрованнаяСтрока)
	
	ШифрованнаяСтрока = Стрзаменить(ШифрованнаяСтрока,"""","");
	
	Аргументы = Новый Массив;
	Аргументы.Добавить(Документ64);
	Аргументы.Добавить(СерияНомерДокумента);
	Аргументы.Добавить(ШифрованнаяСтрока);
	
	РезультатМетки = ВыполнитьКомандуСНастройками("ПрикрепитьВременнуюМетку",Аргументы);
	Если НЕ РезультатМетки.Свойство("success") Тогда
		СообщитьОбОшибкеОбработки(РезультатМетки.Ошибка);
		Возврат;
	ИначеЕсли НЕ РезультатМетки.success Тогда
		СообщитьОбОшибкеОбработки(РезультатМетки.reason);
		Возврат;
	КонецЕсли;
	
	Документ64 = РезультатМетки.pkcs7_64;
	
	ОтправитьВЭДОПодписанныйДокумент(Документ64);
	
КонецПроцедуры

Процедура ОтправитьВЭДОПодписанныйДокумент(Документ64)
	
	ДополнительныеПараметры = Новый Структура("Токен,signature,lang",ПолучитьТокенИНН("КлючСервераЭДО"),Документ64,"ru");
	РезультатЗапроса = ОбработатьЗапрос("ОтправитьПодписанныйДокумент",ДополнительныеПараметры,"");
	
	Если НЕ РезультатЗапроса.КодСостояния = 200 Тогда
		СообщитьОбОшибкеОбработки(РезультатЗапроса.СообщениеОбОшибке+". Ответ результата "+РезультатЗапроса.Содержимое);
		Возврат;
	КонецЕсли; 
	
	//Содержание = РезультатЗапроса.Содержимое;
	
КонецПроцедуры
 
Функция ПолучитьАргументыДляpkcs7(ТокенДляПодписанияДокументов,Результатpkcs7)
	
	Аргументы = Новый Массив;
	Аргументы.Добавить(Результатpkcs7);
	Аргументы.Добавить(ТокенДляПодписанияДокументов);
	Аргументы.Добавить("no");
	
	Возврат Аргументы;
	
КонецФункции

#КонецЕсли 

#КонецОбласти

#КонецОбласти

#Область СериализацияДесериализацияJSON

#Область Запись

Функция ЗаписатьДанныеПолучитьJSON(Значение) Экспорт
	
	Если ПриложениеНижеВерсии("8.3.6") Тогда
		Результат = Парсер_ЗаписатьJSON(Значение);
	Иначе
		Результат = Платформа_ЗаписатьJSON(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Платформа_ЗаписатьJSON(Значение)
	
	Запись = Новый ("ЗаписьJSON");
	Запись.УстановитьСтроку();
	
	Выполнить("ЗаписатьJSON(Запись, Значение)");
	
	Результат = Запись.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция Парсер_ЗаписатьJSON(Значение)
	
	Разделитель = "";
	
	ТипЗн = ТипЗнч(Значение);

	Если ТипЗн = Тип("Строка") Тогда
		Стр = """" + ЭкранироватьЗаменитьНедопустимыеСимволы(Значение) + """";

	ИначеЕсли ТипЗн = Тип("Число") Или ТипЗнч(Значение) = Тип("Булево") Тогда
		Стр = XMLСтрока(Значение);

	ИначеЕсли ТипЗн = Тип("Дата") Тогда
		Стр = """" + ?(ЗначениеЗаполнено(Значение), XMLСтрока(Значение), "") + """";

	ИначеЕсли ТипЗн = Тип("Структура") 
		Или ТипЗн = Тип("Соответствие") 
		Или ТипЗн = Тип("ФиксированнаяСтруктура")
		Или ТипЗн = Тип("ФиксированноеСоответствие")
		Тогда
		Стр = "{";
		Для Каждого Параметр Из Значение Цикл
			Стр = Стр + Разделитель + Символы.ПС + """" + Параметр.Ключ + """:" + Парсер_ЗаписатьJSON(Параметр.Значение);
			Разделитель = ",";
		КонецЦикла;
		Стр = Стр + Символы.ПС + "}";

	ИначеЕсли ТипЗн = Тип("Массив")
		ИЛИ ТипЗн = Тип("ФиксированныйМассив") Тогда
		Стр = "[";
		Для Каждого Элемент Из Значение Цикл
			Стр = Стр + Разделитель + Символы.ПС + Парсер_ЗаписатьJSON(Элемент);
			Разделитель = ",";
		КонецЦикла;
		Стр = Стр + Символы.ПС + "]";

	ИначеЕсли ТипЗн = Тип("ТаблицаЗначений") Тогда
		Колонки = Значение.Колонки;
		Массив = Новый Массив;
		Для Каждого СтрокаТЗ Из Значение Цикл
			Структура = Новый Структура;
			Для Каждого Колонка Из Колонки Цикл
				Структура.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
			КонецЦикла;
			Массив.Добавить(Структура);
		КонецЦикла;
		Стр = Парсер_ЗаписатьJSON(Массив);

	ИначеЕсли Значение = Неопределено Тогда
		Стр = "null";

	Иначе
		Стр = """" + ЭкранироватьЗаменитьНедопустимыеСимволы(Значение) + """";
	КонецЕсли;

	Возврат Стр;
	
КонецФункции

Функция ЭкранироватьЗаменитьНедопустимыеСимволы(Стр)
	
	Результат = СтрЗаменить(Стр			, "\"	, "\\");
	Результат = СтрЗаменить(Результат	, """"	, "\""");
	Результат = СтрЗаменить(Результат	, "/"	, "\/");
	
	Результат = СтрЗаменить(Результат, Символ(8)	, "\b");
	Результат = СтрЗаменить(Результат, Символы.ПФ	, "\f");
	Результат = СтрЗаменить(Результат, Символы.ПС	, "\n");
	Результат = СтрЗаменить(Результат, Символы.ВК	, "\r");
	Результат = СтрЗаменить(Результат, Символы.ВТаб	, "\t");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область Чтение

Функция ПрочитатьДанныеJSON(Строка) Экспорт

	ЧитатьВСоответствие = Ложь;

	Результат = ПереопределенныйПрочитатьJSON(Строка);
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьВСоответствие(Строка) Экспорт

	ЧитатьВСоответствие = Истина;

	Результат = ПереопределенныйПрочитатьJSON(Строка);
	
	Возврат Результат;
	
КонецФункции

Функция ПереопределенныйПрочитатьJSON(Строка)

	Если ПриложениеНижеВерсии("8.3.6") Тогда
		Результат = Парсер_ПрочитатьJSON(Строка);
	Иначе
		Результат = Платформа_ПрочитатьJSON(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Платформа_ПрочитатьJSON(Строка)
	
	ЕстьОшибкаЧтенияИзСтроки = Ложь;
	ЕстьОшибкаЧтенияИзФайла = Ложь;
	
	Результат = Платформа_ПрочитатьИзСтроки(
			Строка,
			ЕстьОшибкаЧтенияИзСтроки
		);
	
	Если ЕстьОшибкаЧтенияИзСтроки Тогда
		
		Результат = Платформа_ПрочитатьИзФайла(
				Строка,
				ЕстьОшибкаЧтенияИзФайла
			);
		
	КонецЕсли;
	
	Отказ = (ЕстьОшибкаЧтенияИзСтроки И ЕстьОшибкаЧтенияИзФайла);
	
	Если Отказ Тогда
		
		ВызватьИсключение "Не удалось прочитать JSON";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Платформа_ПрочитатьИзСтроки(Строка, Отказ)
	
	Чтение = Новый("ЧтениеJSON");
	Чтение.УстановитьСтроку(Строка);
	
	Попытка
		
		Результат = Вычислить("ПрочитатьJSON(Чтение, ЧитатьВСоответствие)");
		
	Исключение
		
		Отказ = Истина;
		
		Инфо = ИнформацияОбОшибке();
		Ошибка = КраткоеПредставлениеОшибки(Инфо);
				
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция Платформа_ПрочитатьИзФайла(Строка, Отказ)
	
	Кодировка = "utf-8";
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Строка);
	ТД.Записать(ИмяВремФайла, Кодировка);
	ТД = Неопределено;
	
	Чтение = Новый("ЧтениеJSON");
	Чтение.ОткрытьФайл(ИмяВремФайла, Кодировка);
	
	Попытка
		
		Результат = Вычислить("ПрочитатьJSON(Чтение, ЧитатьВСоответствие)");
		
	Исключение
		
		Отказ = Истина;
		Инфо = ИнформацияОбОшибке();
		Ошибка = КраткоеПредставлениеОшибки(Инфо);
				
	КонецПопытки;
	
	Чтение.Закрыть();
	
	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		Ошибка = ПодробноеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция Парсер_ПрочитатьJSON(Знач Строка)
	
	// Выполним замену экранируемых символов.
	Замены = Новый Массив;
	Замены.Добавить(Новый Структура("До, ИД, После", "\\"	, "71769bf9-6d91-4bc6-9dbf-362c8fd37354", "\"));
	Замены.Добавить(Новый Структура("До, ИД, После", "\"""	, "ec0cd866-326b-497f-9612-9041e977653d", """"""));
	
	ВыполнитьЗаменыДоОбработки(Строка, Замены);
	
	// Нарежем строку на куски, так она будет быстрее обрабатываться
	СимволыДляПереноса = "{}[]:,";
	Для Сч=1 По СтрДлина(СимволыДляПереноса) Цикл
		ТекСимвол = Сред(СимволыДляПереноса, Сч, 1);
		Строка = СтрЗаменить(Строка, ТекСимвол, Символы.ПС + ТекСимвол + Символы.ПС);
	КонецЦикла;
	
	// Преобразуем строку в Массив строк, так обрабатывается гораздо быстрее
	МассивСтрок = ТекстВМассивСтрок(Строка);
	НомерТекущейСтроки = 1;
	
	// Распарсим
	Результат = ОбработатьТекущееЗначение(МассивСтрок, НомерТекущейСтроки);
	
	// Вернем на место экранированные символы.
	ТекстСЗаменами = ЗначениеВСтрокуВнутр(Результат);
	ВыполнитьЗаменыПослеОбработки(ТекстСЗаменами, Замены);
	
	Результат = ЗначениеИзСтрокиВнутр(ТекстСЗаменами);
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьЗаменыДоОбработки(Строка, Замены)
	
	Для Каждого Элемент Из Замены Цикл
		Строка = СтрЗаменить(Строка, Элемент.До, Элемент.ИД);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаменыПослеОбработки(Строка, Замены)
	
	Для Каждого Элемент Из Замены Цикл
		Строка = СтрЗаменить(Строка, Элемент.ИД, Элемент.После);
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьТекущееЗначение(МассивСтрок, НомерТекущейСтроки)
	
	ВсегоСтрок = МассивСтрок.Количество();
	
	Пока НомерТекущейСтроки < ВсегоСтрок Цикл
		
		ТекСтрока = МассивСтрок[НомерТекущейСтроки];
	
		Если ПустаяСтрока(ТекСтрока) Тогда
			
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
			Продолжить;
			
		ИначеЕсли СтрДлина(ТекСтрока) = 1 Тогда
			
			Если ТекСтрока = "{" Тогда
				
				// Начинается новая структура/соответствие.
				Результат = ЗаполнитьКоллекциюПоМассивуСтрок(МассивСтрок, НомерТекущейСтроки);
				Возврат Результат;
				
			ИначеЕсли ТекСтрока = "[" Тогда
				
				// Начинается новый массив.
				Результат = ОбработатьНовыйМассив(МассивСтрок, НомерТекущейСтроки);
				Возврат Результат;
				
			ИначеЕсли ТекСтрока = "," или ТекСтрока = ":" Тогда
			//	или ТекСтрока="""" Тогда
				
				// пустота, идем дальше
				
			Иначе// Таки значение
				
				Результат = ОбработатьКонечноеЗначение(МассивСтрок, НомерТекущейСтроки);
				Возврат Результат;
				
				
			КонецЕсли;
			
				
		ИначеЕсли СокрЛП(ТекСтрока = "") Тогда
			
				// Пустота, идем дальше
				
		Иначе
			
			// Мы попадаем на конечное значение. Оно может быть в кавычках или без
			Результат = ОбработатьКонечноеЗначение(МассивСтрок, НомерТекущейСтроки);
			Возврат Результат;
			
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
	КонецЦикла;
	
КонецФункции

Функция ОбработатьКонечноеЗначение(МассивСтрок, НомерТекущейСтроки)
	
	// В этой строке может быть: одна кавычка, две, ноль
	НачальнаяСтрока = СокрЛП(МассивСтрок[НомерТекущейСтроки]);
	КавычкаОткрыта = (Лев(НачальнаяСтрока, 1) = """");
	КавычкаЗакрыта = (Прав(НачальнаяСтрока, 1) = """") И СтрДлина(НачальнаяСтрока) > 1;
	ЧислоКавычек = 0;
	
	Если КавычкаОткрыта И КавычкаЗакрыта Тогда
		
		Результат = НачальнаяСтрока;
		Результат = СтрЗаменить(Результат, """", "");
		
	ИначеЕсли Не КавычкаЗакрыта И не КавычкаОткрыта Тогда
		
		// Тут еще будут преобразования: булево, числа, даты
		Результат = НачальнаяСтрока;
		
		Если Результат = "true" Тогда
			Возврат Истина;
		ИначеЕсли Результат = "false" Тогда
			Возврат Ложь;
		ИначеЕсли ВСтрокеТолькоЦифры(Результат) Тогда
			Возврат Число(Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе// Многострочное значение, склеим
		//и оно началось с кавычки
		
		Результат	 = НачальнаяСтрока;
		ВсегоСтрок	 = МассивСтрок.Количество();
		
		Пока НомерТекущейСтроки < ВсегоСтрок Цикл
			
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
			ТекСтрока = МассивСтрок[НомерТекущейСтроки];
			
			Результат = Результат + ТекСтрока;
			
			Если Найти(ТекСтрока, """") > 0 Тогда 
				Результат = СокрЛП(Сред(Результат, 2, СтрДлина(Результат) - 2));// уберем левую и правую кавычку
				Возврат Результат;// Вернемся тогда, когда значение кончится, т.е. встретится кавычка (мы ведь все экранированные кавычки поменяли на гуиды)
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьКоллекциюПоМассивуСтрок(МассивСтрок, НомерТекущейСтроки)
	
	Если ЧитатьВСоответствие Тогда
		Результат = Новый Соответствие;
	Иначе
		Результат = Новый Структура;
	КонецЕсли; 
	
	ВсегоСтрок = МассивСтрок.Количество();
	
	Пока НомерТекущейСтроки < ВсегоСтрок Цикл
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
		ТекСтрока = МассивСтрок[НомерТекущейСтроки];
		
		Если ТекСтрока = "}" Тогда
			// Структура закончилась
			Возврат Результат;
			
		ИначеЕсли ТекСтрока = "," Тогда
			
			Продолжить;// Дальше должен быть еще одна пара ключ-значение
			
		ИначеЕсли СокрЛП(ТекСтрока) = "" Тогда//пробелы и т.д.
			
			Продолжить;
			
		Иначе// Будем считать, что началась пара ключ-значение
			
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
			ТекЗначение = ОбработатьТекущееЗначение(МассивСтрок, НомерТекущейСтроки);
			Результат.Вставить(СтрЗаменить(ТекСтрока, """", ""),ТекЗначение);

		КонецЕсли;
	
	КонецЦикла;
	
	НомерТекущейСтроки = НомерТекущейСтроки + 1;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьНовыйМассив(МассивСтрок, НомерТекущейСтроки)
	
	Результат	 = Новый Массив;
	ВсегоСтрок	 = МассивСтрок.Количество();
	
	Пока НомерТекущейСтроки < ВсегоСтрок Цикл
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
		ТекСтрока = МассивСтрок[НомерТекущейСтроки];
		
		Если ТекСтрока = "]" Тогда
			// Массив кончился, выходим, оставаясь на текущей строке
			Возврат Результат;
			
		ИначеЕсли ТекСтрока = "," Тогда
			
			// Будет еще один элемент массива
			Продолжить;
			
		ИначеЕсли СокрЛП(ТекСтрока) = "" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить(ОбработатьТекущееЗначение(МассивСтрок, НомерТекущейСтроки));
		
	КонецЦикла;
	
	//можно добавить проверку, что именно кончилось: массив или файл
	НомерТекущейСтроки = НомерТекущейСтроки + 1;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстВМассивСтрок(Знач мТекст)
	
	мТекст = Символы.ПС + мТекст + Символы.ПС;// Чтобы точно было больше 1 строки
	
	мЧислоСтрок = СтрЧислоСтрок(мТекст);
	
	мТекст = СтрЗаменить(мТекст, """", """"""); // Одинарные кавычки на двойные
	мТекст = СтрЗаменить(мТекст, Символы.ПС, """}," + Символы.ПС + "{""S"","""); 
	
	мТекст = "{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,
	|{" + Формат(мЧислоСтрок + 1, "ЧГ=0") + ",
	|" //+ 1 фиктивный элемент
	+ "{""S"",""" 
	
	+ мТекст
	
	+ """}"// Фиктивный элемент массива в конце, чтоб избежать проблем с запятой
	+ "
	|}
	|}";
	
	Возврат ЗначениеИзСтрокиВнутр(мТекст);
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область СистемныеПроцедурыФункции

Функция ПриложениеНижеВерсии(Версия)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат (СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, Версия) < 0);

		
КонецФункции

Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Результат = 0;
	
	Пока НЕ ПустаяСтрока(СтрокаВерсии1) ИЛИ НЕ ПустаяСтрока(СтрокаВерсии2) Цикл
		
		Поз = Найти(СтрокаВерсии1, ".");
		Если Поз > 0 Тогда
			НомерПервойВерсии = Число(Лев(СтрокаВерсии1, Поз - 1));
			СтрокаВерсии1 = Сред(СтрокаВерсии1, Поз + 1);
		Иначе
			НомерПервойВерсии = ?(ПустаяСтрока(СтрокаВерсии1), 0, Число(СтрокаВерсии1));
			СтрокаВерсии1 = "";
		КонецЕсли;
		
		Поз = Найти(СтрокаВерсии2, ".");
		Если Поз > 0 Тогда
			НомерВторойВерсии = Число(Лев(СтрокаВерсии2, Поз - 1));
			СтрокаВерсии2 = Сред(СтрокаВерсии2, Поз + 1);
		Иначе
			НомерВторойВерсии = ?(ПустаяСтрока(СтрокаВерсии2), 0, Число(СтрокаВерсии2));
			СтрокаВерсии2 = "";
		КонецЕсли;
		
		Результат = НомерПервойВерсии - НомерВторойВерсии;
		
		Если Результат <> 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

Функция ПрочитатьСодержимоеФайла(ИмяФайла)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла); //,КодировкаТекста.UTF8
	Возврат ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции
 
Процедура ЗаписатьСодержимоеВФайл(Данные,ИмяФайла,КодировкаФайла = Неопределено)
	
	Если КодировкаФайла = Неопределено Тогда
		КодировкаФайла  = КодировкаТекста.UTF8;
	КонецЕсли; 
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(Данные);
	ТекстовыйДокумент.Записать(ИмяФайла,КодировкаФайла);
	
КонецПроцедуры
 
Функция ПроверкаСуществованияФайлаПоИНН(ИНН,ПолныйПутьФайла)
	
	ПолныйПутьФайла = ПутьКФайлуКриптографии + "\"+ИНН+"."+ТипФайлаДляСохраненияДанных();
	Возврат ПроверкаСуществованияФайла(ПолныйПутьФайла);
	
КонецФункции

Функция ПроверкаСуществованияФайла(ПолныйПутьФайла)
	
	Файл = Новый Файл(ПолныйПутьФайла);
	Возврат Файл.Существует();
	
КонецФункции
 
#КонецОбласти 

#Область РаботаСИБ

Процедура ОбработатьСписокСертификатов(СертификатыJSON) Экспорт
	
	Сертификаты = ПрочитатьДанныеJSON(СертификатыJSON);
	
	Для каждого Сертификат Из Сертификаты.certificates Цикл
		
		СписокСвойствСертификата = РазложитьСтрокуВМассивСлов(Сертификат.alias,",");
		Для каждого СвоствоСертификата Из СписокСвойствСертификата Цикл
			
			Если Найти(СвоствоСертификата,"uid=") > 0 Тогда
				
				СвойствоИНН = РазложитьСтрокуВМассивСлов(СвоствоСертификата,"=");
				СохранитьДанныеОрганизацииВФайлПоПолюИНН(СвойствоИНН[1],Сертификат);
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		
	КонецЦикла; 
	
	
КонецПроцедуры

Функция ПолучитьИмяСправочникОрганизации() Экспорт
	
	ИмяСправочникаОрганизация = "";
	Если Метаданные.Справочники.Найти("Организация") <> Неопределено Тогда
		ИмяСправочникаОрганизация = "Организация";
	ИначеЕсли Метаданные.Справочники.Найти("Организации") <> Неопределено Тогда
		ИмяСправочникаОрганизация = "Организации";
	КонецЕсли;
	
	Возврат ИмяСправочникаОрганизация;
	
КонецФункции
 
#КонецОбласти

#Область РаботаСоСтроками

Функция РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = Неопределено) Экспорт
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Строка, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат Найти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент Из Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция ТолькоЦифрыВСтрокеОбработки(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

#Область РаботаССетью

Функция ЗагрузитьСодержимоеИзИнтернет(
	Знач URL,
	ДопПараметры = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Содержимое"        , Неопределено);
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("ФорматОтвета"      , 0);

	// Формат ответа: 0 - имя файла ответа, 1 - как строка, 2 - как двоичные данные.
	// Метод: "GET", "POST" или "PUT".
	// ДанныеДляОбработки: данные, передаваемые методом POST.
	// ФорматДанныхДляОбработки: 0 - имя файла, 1 как строка, 2 - как двоичные данные.
	// Заголовки - заголовки запроса.
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 0);
	ПараметрыПолучения.Вставить("Метод"                   , "GET");
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 0);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	ПараметрыПолучения.Вставить("ИмяФайлаОтвета"          , Неопределено);
	ПараметрыПолучения.Вставить("Таймаут"                 , -1);
	ПараметрыПолучения.Вставить("НастройкиПрокси"         , Неопределено);
	
	Если ДопПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПолучения, ДопПараметры);
	КонецЕсли;
	
	Если ПараметрыПолучения.Таймаут = -1 Тогда
		// Таймаут по умолчанию.
		ПараметрыПолучения.Таймаут = 30;
	КонецЕсли;
	
	Результат.ФорматОтвета = ПараметрыПолучения.ФорматОтвета;
	
	КоличествоПеренаправлений  = 0;
	МаксКолвоПеренаправлений   = 7;
	Перенаправления            = Новый Массив;
	ВыполненныеПеренаправления = Новый Соответствие;
	ПроксиПоСхемам             = Новый Соответствие;
	ЗащищенноеСоединениеКэш    = Неопределено;
	
	URLДляПолучения = URL;
	HTTPЗапрос = Новый HTTPЗапрос;
	Если ПараметрыПолучения.Заголовки <> Неопределено Тогда
		HTTPЗапрос.Заголовки = ПараметрыПолучения.Заголовки;
	КонецЕсли;
	ТелоУстановлено = Ложь;
	Ответ = Неопределено;
	Пока КоличествоПеренаправлений < МаксКолвоПеренаправлений Цикл

		СтруктураURI = СтруктураURI(URLДляПолучения);
		Если СтруктураURI.Схема <> "https" Тогда
			ЗащищенноеСоединение = Неопределено;
		Иначе
			Если ЗащищенноеСоединениеКэш = Неопределено Тогда
				ЗащищенноеСоединениеКэш = Новый ЗащищенноеСоединениеOpenSSL();
			КонецЕсли;
			ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
		КонецЕсли;
		
		ЛогинДляПолучения  = СтруктураURI.Логин;
		ПарольДляПолучения = СтруктураURI.Пароль;
		
		Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
			Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		Иначе
			Порт = Число(СтруктураURI.Порт);
		КонецЕсли;

		Прокси = ПроксиПоСхемам.Получить(СтруктураURI.Схема);
		Если Прокси = Неопределено Тогда
			Если ПараметрыПолучения.НастройкиПрокси = Неопределено Тогда
				Прокси = Неопределено;
			Иначе
				Прокси = СформироватьИнтернетПрокси(ПараметрыПолучения.НастройкиПрокси, СтруктураURI.Схема);
			КонецЕсли;
			ПроксиПоСхемам.Вставить(СтруктураURI.Схема, Прокси);
		КонецЕсли;

		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			Порт,
			ЛогинДляПолучения,
			ПарольДляПолучения,
			Прокси,
			ПараметрыПолучения.Таймаут,
			ЗащищенноеСоединение);

		Попытка

			HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;

			Если ПараметрыПолучения.Метод = "GET" Тогда
				Ответ = Соединение.Получить(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
			ИначеЕсли ПараметрыПолучения.Метод = "HEAD" Тогда
				Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
			Иначе

				Если НЕ ТелоУстановлено Тогда

					Если ПараметрыПолучения.ДанныеДляОбработки <> Неопределено Тогда

						Если ПараметрыПолучения.ФорматДанныхДляОбработки = 0 Тогда

							HTTPЗапрос.УстановитьИмяФайлаТела(ПараметрыПолучения.ДанныеДляОбработки);

						ИначеЕсли ПараметрыПолучения.ФорматДанныхДляОбработки = 1 Тогда

							HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПолучения.ДанныеДляОбработки, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);

						Иначе

							HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыПолучения.ДанныеДляОбработки);

						КонецЕсли;

					КонецЕсли;

					ТелоУстановлено = Истина;

				КонецЕсли;

				Если ПараметрыПолучения.Метод = "PUT" Тогда
					Ответ = Соединение.Записать(HTTPЗапрос);
				Иначе
					// POST
					Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
				КонецЕсли;

			КонецЕсли;

		Исключение
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось загрузить содержимое (%1). %2';uz=""mazmunini (% 1) yuklab bo'lmadi. 2%"""),
					URL,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				Перенаправления);
			Возврат Результат;
		КонецПопытки;

		Результат.КодСостояния = Ответ.КодСостояния;

		Если Ответ.КодСостояния = 301 // 301 Moved Permanently
			ИЛИ Ответ.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			ИЛИ Ответ.КодСостояния = 303 // 303 See Other by GET
			ИЛИ Ответ.КодСостояния = 307 Тогда // 307 Temporary Redirect

			КоличествоПеренаправлений = КоличествоПеренаправлений + 1;

			Если КоличествоПеренаправлений > МаксКолвоПеренаправлений Тогда
				УстановитьОписаниеОшибки(
					Результат,
					"ServerError",
					НСтр("ru='Превышено количество перенаправлений.';uz='Yonaltiruvchi soni oshdi.'"),
					ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка сервера при получении файла (%1). Превышено количество перенаправлений (%2).';uz=""Server Xato retrieving fayl (% 1). yo'naltirish raqamini (2%) oshdi."""),
						URL,
						МаксКолвоПеренаправлений),
					Перенаправления);
				Возврат Результат;
			Иначе
				Location = Ответ.Заголовки.Получить("Location");
				Если Location = Неопределено Тогда
					УстановитьОписаниеОшибки(
						Результат,
						"ServerError",
						НСтр("ru='Некорректное перенаправление.';uz=""Noto'g'ri yo'l-yo'riq."""),
						ПодставитьПараметрыВСтроку(
							НСтр("ru='Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".';uz='Server xatosi (% 1) faylni olishda (2%). Noto''g''ri yo''l-yo''riq, hech HTTP-header ""Manzil"" javob.'"),
							Ответ.КодСостояния,
							URL),
						Перенаправления);
					Возврат Результат;
				Иначе
					Location = СокрЛП(Location);
					Если ПустаяСтрока(Location) Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru='Некорректное перенаправление.';uz=""Noto'g'ri yo'l-yo'riq."""),
							ПодставитьПараметрыВСтроку(
								НСтр("ru='Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".';uz='Server xatosi (% 1) faylni olishda (2%). Noto''g''ri yo''l-yo''riq, bo''sh HTTP-javob header ""Manzil"".'"),
								Ответ.КодСостояния,
								URL),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					Если ВыполненныеПеренаправления.Получить(Location) <> Неопределено Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru='Циклическое перенаправление.';uz=""Tsiklik yo'l-yo'riq."""),
							ПодставитьПараметрыВСтроку(
								НСтр("ru='Ошибка сервера (%1) при получении файла (%2). Циклическое перенаправление (%3).';uz=""Server xatosi (% 1) faylni olishda (2%). Tsiklik yo'naltirish (3%)."""),
								Ответ.КодСостояния,
								URL,
								Location),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					ВыполненныеПеренаправления.Вставить(Location, Истина);
					URLДляПолучения = Location;

					Перенаправления.Добавить(Строка(Ответ.КодСостояния) + ": " + Location);

				КонецЕсли;
			КонецЕсли;

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ПараметрыПолучения.ФорматОтвета = 0 Тогда
		Результат.Содержимое = Ответ.ПолучитьИмяФайлаТела();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 1 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 2 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Результат.Содержимое = Ответ;
	КонецЕсли;
	
	// Обработка ответа
	Если Ответ.КодСостояния < 200 Или Ответ.КодСостояния >= 300 Тогда

		// Анализ ошибки
		Если Ответ.КодСостояния = 407 Тогда

			// Ошибка подключения - не пройдена аутентификация на прокси-сервере.
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru='Ошибка аутентификации на прокси-сервере.';uz='Haqiqiylikni tekshirish proksi server ustida olmadi.'"),
				ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния < 200
			ИЛИ Ответ.КодСостояния >= 300
			И Ответ.КодСостояния < 400 Тогда

			// Формат ответа сервера не поддерживается.
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				ПодставитьПараметрыВСтроку(
					НСтр("ru='Некорректный ответ сервера (%1).';uz=""server (1%) dan noto'g'ri javob."""),
					Ответ.КодСостояния),
				ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера при получении файла (%1). Некорректный (неподдерживаемый) ответ (%2).
						|Тело ответа: %3'"),
					URL,
					Ответ.КодСостояния,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда

			// Ошибка клиентской части - некорректный запрос.
			УстановитьОписаниеОшибки(
				Результат,
				"ClientError",
				ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка (%1) при выполнении запроса к ресурсу.';uz='Xato (1%) resursiga talab.'"),
					Строка(Ответ.КодСостояния)),
				ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		Иначе

			// Ошибка сервера - 5хх
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				ПодставитьПараметрыВСтроку(
					НСтр("ru='Код ошибки: %1.';uz='Xato kodi:% 1.'"),
					Строка(Ответ.КодСостояния)),
				ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера (%1) при обработке запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		КонецЕсли;

		ДобавитьСписокПеренаправленийКИнформацииОбОшибке(
			Результат.ИнформацияОбОшибке,
			Перенаправления);

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ОбновитьТокенАвторизации(Сохранить=Истина) Экспорт
	
	Если Сохранить Тогда
		СохранитьЛогинПарольВХранилище();
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура("username,password",ИмяПользователя,ПарольПользователя);
	Результат = ОбработатьЗапрос("ПолучитьТокен",ДополнительныеПараметры);
	
	Если Результат.КодСостояния = 200 Тогда
		СодержаниеОтвета = ПрочитатьДанныеJSON(Результат.Содержимое);
		Токен = СодержаниеОтвета.token;
		ДанныеУчетки = ОбработатьЗапрос("ПолучитьДанныеУчетки",Новый Структура("Токен",Токен));
		
		Если ДанныеУчетки.КодСостояния = 200 Тогда
			
			МассивИНН = Новый Массив;
			ОрганизацииУчетки = ПрочитатьДанныеJSON(ДанныеУчетки.Содержимое).organizations;
			Для каждого СтрокаОрганизации Из ОрганизацииУчетки Цикл
				ИНН = СтрокаОрганизации.inn;
				ИзменитьСоздатьТокенВоВременныйФайл("КлючСервераЭДО",Токен);
				МассивИНН.Добавить(ИНН);
			КонецЦикла; 
			Возврат МассивИНН;
			
		Иначе
			Возврат Результат.СообщениеОбОшибке;
		КонецЕсли;
		
	Иначе
		Возврат Результат.СообщениеОбОшибке;
	КонецЕсли; 
	
КонецФункции

Процедура ПроверитьОбновитьТокенАвторизации() Экспорт
	
	ДанныеТокена = ПолучитьТокенИНН("КлючСервераЭДО",Истина);
	
	Если (ТекущаяДата() - ПолучитьДатуИзФормата(ДанныеТокена.Дата)) < 3600*5 Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТокенАвторизации(Ложь);
	
КонецПроцедуры

Функция РазделитьURL(Знач URL) Экспорт
	
	СтруктураURL = СтруктураURI(URL);
	
	Результат = Новый Структура;
	Результат.Вставить("Протокол", ?(ПустаяСтрока(СтруктураURL.Схема), "http", СтруктураURL.Схема));
	Результат.Вставить("ИмяСервера", СтруктураURL.ИмяСервера);
	Результат.Вставить("ПутьКФайлуНаСервере", СтруктураURL.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция ); //+ 1    - это исключил возможно пригодиться в упр формах
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтрокеОбработки(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОписаниеОшибки(Результат, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, Перенаправления)

	Результат.КодОшибки          = КодОшибки;
	Результат.СообщениеОбОшибке  = СообщениеОбОшибке;
	ДопСообщение = "";
	Если КодОшибки = "ConnectError" Тогда
		ДопСообщение = НСтр("ru='Ошибка при подключении к серверу.';uz='Serverga ulanishda xato yuz berdi.'");

	ИначеЕсли КодОшибки = "ServerError" Тогда
		ДопСообщение = НСтр("ru='На сервере возникла внутренняя ошибка при обработке запроса.';uz=""Sizning so'rov ishlash esa serverda ichki xatoga duch keldi.""");

	ИначеЕсли КодОшибки = "ClientError" Тогда
		ДопСообщение = НСтр("ru='Некорректный запрос.';uz=""Noto'g'ri so'rov.""");

	ИначеЕсли КодОшибки = "InternalError" Тогда
		ДопСообщение = НСтр("ru='Внутренняя ошибка.';uz='Ichki xato.'");

	ИначеЕсли КодОшибки = "LoginError" Тогда
		ДопСообщение = НСтр("ru='Ошибка аутентификации на сервере.';uz='Haqiqiylikni tekshirish serverda olmadi.'");

	КонецЕсли;

	Результат.СообщениеОбОшибке =
		?(ПустаяСтрока(ДопСообщение), "", ДопСообщение + " ")
		+ СообщениеОбОшибке;

	Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;

	Если Перенаправления.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке + Символы.ПС
			+ НСтр("ru='Перенаправления:';uz=""qayta yo'naltirishlar:""") + Символы.ПС
			+ ПолучитьСтрокуИзМассиваПодстрок(Перенаправления, ", " + Символы.ПС);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСписокПеренаправленийКИнформацииОбОшибке(ИнформацияОбОшибке, Перенаправления)

	Если Перенаправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСтрокуИзМассиваПодстрок(
	
	ИнформацияОбОшибке = ИнформацияОбОшибке + Символы.ПС
		+ НСтр("ru='Перенаправления:';uz=""qayta yo'naltirishlar:""") + Символы.ПС
		+ ПолучитьСтрокуИзМассиваПодстрок(Перенаправления, ", " + Символы.ПС));

КонецПроцедуры

Функция СформироватьИнтернетПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера = Неопределено
		Или НастройкаПроксиСервера = "<СистемныеУстановки>" Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;	
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер.
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера.
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
			
	// Настройки прокси-сервера, заданные вручную.
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера.
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ОсновнойПутьПодключенияКСерверу()
	
	Возврат ?(ТестовыйРежим,"https://staging.hippo.uz","https://app.hippo.uz/");
	
КонецФункции

Функция ПолучитьПутьЗапросаПоКлючу(КлючЗапроса,ВидДокумента)
	
	ПутьЗапроса = "/auth/get-me";
	СоответствиеЗапросов = Новый Соответствие;
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬТОКЕН","/auth/login");
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬДАННЫЕУЧЕТКИ","/auth/get-me");
	СоответствиеЗапросов.Вставить("ПРОВЕРИТЬТОКЕН","/excel/organization/template/get");
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬФИЛИАЛОВ","/branch/get");
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬДОГОВОРОВ","/contract/get");
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬСПИСОКЗАКАЗОВ","/order/get");
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬСПИСОКСЧЕТФАКТУР","/roaming/invoice/"+ВидДокумента+"/get");
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬОБЩЕЕКОЛИЧЕСТВОСЧЕТФАКТУР","/roaming/invoice/"+ВидДокумента+"/count");
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬСЧЕТФАКТУРУ","/roaming/invoice"+?(ВидДокумента="","","/"+ВидДокумента)+"/get/");
	СоответствиеЗапросов.Вставить("ПОЛУЧИТЬПЕЧАТКУСЧЕТФАКТУРЫ","/pdf/invoice/");
	СоответствиеЗапросов.Вставить("СОХРАНИТЬСЧЕТФАКТУРУВЧЕРНОВИК","/roaming/invoice/"+ВидДокумента+"/save");
	СоответствиеЗапросов.Вставить("ПРИКРЕПИТЬВРЕМЕННУЮМЕТКУ","/roaming/timestamp/"+ВидДокумента);
	СоответствиеЗапросов.Вставить("ОТПРАВИТЬПОДПИСАННЫЙДОКУМЕНТ","/roaming/invoice/send");
	
	Если СоответствиеЗапросов.Получить(ВРЕГ(КлючЗапроса)) <> Неопределено  Тогда
		ПутьЗапроса = СоответствиеЗапросов[ВРЕГ(КлючЗапроса)]; 
	КонецЕсли; 
	
	Возврат ПутьЗапроса;
	
КонецФункции
 
Функция ПолучитьМетодПоЗапросаПоКлючу(КлючЗапроса)
	
	ПутьЗапроса = "GET";
	Если ВРЕГ(КлючЗапроса) = "ПОЛУЧИТЬТОКЕН" 
		ИЛИ ВРЕГ(КлючЗапроса) = "СОХРАНИТЬСЧЕТФАКТУРУВЧЕРНОВИК"
		ИЛИ ВРЕГ(КлючЗапроса) = "ОТПРАВИТЬПОДПИСАННЫЙДОКУМЕНТ" Тогда
		ПутьЗапроса = "POST";
	КонецЕсли; 
	
	Возврат ПутьЗапроса;
	
КонецФункции

Функция ПолучитьТелоПараметрЗапросаПоДополнительныеПараметры(КлючЗапроса,ДополнительныеПараметры)
	
	Результат = "";
	МетодЗапроса = ПолучитьМетодПоЗапросаПоКлючу(КлючЗапроса);
	Если МетодЗапроса = "GET" Тогда
		
		Для каждого КлючЗначение Из ДополнительныеПараметры Цикл
			Если ПустаяСтрока(Результат) Тогда
				Результат = "?"+Строка(КлючЗначение.Ключ)+"="+Строка(КлючЗначение.Значение);
			Иначе 
				Результат = Результат +"&"+Строка(КлючЗначение.Ключ)+"="+Строка(КлючЗначение.Значение);
			КонецЕсли; 
		КонецЦикла; 
		
	ИначеЕсли МетодЗапроса = "POST" Тогда
		
		Результат = ЗаписатьДанныеПолучитьJSON(ДополнительныеПараметры);
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗаголовкиДляЗапроса(Токен)
	
	Заголовки = Новый Соответствие;
	Если Не ПустаяСтрока(Токен) Тогда
		Заголовки.Вставить("Authorization","Bearer "+Токен);
	КонецЕсли; 
	
	Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Заголовки.Вставить("Accept","application/json");
	
	Возврат Заголовки;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗапроса(КлючЗапроса,Адрес,ДополнительныеПараметры,ПараметрыПолучения)
	
	Токен = "";
	Если ДополнительныеПараметры.Свойство("Токен") Тогда
		Токен = ДополнительныеПараметры.Токен;
		ДополнительныеПараметры.Удалить("Токен");
	КонецЕсли; 
	ПараметрыПолучения.Заголовки = ПолучитьЗаголовкиДляЗапроса(Токен);
		
	МетодЗапроса = ПолучитьМетодПоЗапросаПоКлючу(КлючЗапроса);
	ТелоПараметрЗапроса = ПолучитьТелоПараметрЗапросаПоДополнительныеПараметры(КлючЗапроса,ДополнительныеПараметры);
	
	Если МетодЗапроса = "GET" Тогда
		Адрес = Адрес + ТелоПараметрЗапроса;
	ИначеЕсли МетодЗапроса = "POST" Тогда
		ПараметрыПолучения.ДанныеДляОбработки = ТелоПараметрЗапроса;
	КонецЕсли; 
	
КонецПроцедуры
 
Функция ОбработатьЗапрос(КлючЗапроса,ДополнительныеПараметры,ВидДокумента="",УникальностьДокумента="") Экспорт
	
	Если НЕ (Врег(КлючЗапроса) = "ПОЛУЧИТЬТОКЕН" 
			ИЛИ Врег(КлючЗапроса) = "ПОЛУЧИТЬДАННЫЕУЧЕТКИ"
			ИЛИ Врег(КлючЗапроса) = "ПРОВЕРИТЬТОКЕН" ) Тогда
		ПроверитьОбновитьТокенАвторизации();
	КонецЕсли; 
	
	АдресРесурса = ОсновнойПутьПодключенияКСерверу();
	АдресРесурса = АдресРесурса + ПолучитьПутьЗапросаПоКлючу(КлючЗапроса,ВидДокумента)+УникальностьДокумента;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 1);
	ПараметрыПолучения.Вставить("Метод"                   , ПолучитьМетодПоЗапросаПоКлючу(КлючЗапроса));
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	
	Если ДополнительныеПараметры.Свойство("Файл") Тогда
		ПараметрыПолучения.Вставить("ИмяФайлаОтвета"      , ДополнительныеПараметры.Файл);
		ДополнительныеПараметры.удалить("Файл");
	КонецЕсли; 
	
	ЗаполнитьПараметрыЗапроса(КлючЗапроса,АдресРесурса,ДополнительныеПараметры,ПараметрыПолучения);
	
	Возврат ЗагрузитьСодержимоеИзИнтернет(АдресРесурса,ПараметрыПолучения);
	
КонецФункции

#КонецОбласти

#Область ЭДО

Процедура ЗаполнитьПараметрыЭДО(СтрокаЭДО,ПараметрыЭДО)
	
	СтрокаЭДО.customer_inn = ПараметрыЭДО.customer.inn;
	СтрокаЭДО.customer_name = ПараметрыЭДО.customer.name;
	СтрокаЭДО.executor_inn = ПараметрыЭДО.executor.inn;
	СтрокаЭДО.executor_name = ПараметрыЭДО.executor.name;
	
КонецПроцедуры

Функция ПолучитьНовыйУИДДляЭДО() Экспорт
	
	УИД = Новый УникальныйИдентификатор;
	УИД = Лев(СтрЗаменить(Строка(УИД),"-",""),24);
	Возврат УИД;
	
КонецФункции

Процедура ОтправкаДокументовВПодпись(ТипДокумента) Экспорт
	
	ТокенДляПодписанияДокументов = "";
	ПолучитьПодписатьКлючКомпоненты(ТокенДляПодписанияДокументов);
	
	Если ПустаяСтрока(ТокенДляПодписанияДокументов) Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТЧ из ТабличнаяЧастьПодписаниеДокументов цикл
		
		Если СтрокаТЧ.Выгружать тогда
			
			ДокументСсылка = СтрокаТЧ.Документ;
			Данные = ПолучитьДанныеДокументаСчетФактурыЭДО(ДокументСсылка);
			УникальныйИдентификатор = Данные.УИД;
			Если ОтправленВЧерновик(ДокументСсылка,УникальныйИдентификатор,СтрокаТЧ,ТипДокумента) Тогда
				СтрокаТЧ.Статус = СтатусЧерновик();
			КонецЕсли; 
			
			ДополнительныеПараметры = Новый Структура("Токен",ПолучитьТокенИНН("КлючСервераЭДО"));
			РезультатДокумента = ОбработатьЗапрос("ПолучитьСчетФактуру",ДополнительныеПараметры,"draft",УникальныйИдентификатор);
			
			Если РезультатДокумента.КодСостояния = 200 Тогда
				ЗначениеКонтентаСтрокой = ПрочитатьДанныеJSON(РезультатДокумента.Содержимое).content;
			Иначе
				СообщитьОбОшибкеОбработки(РезультатДокумента.СообщениеОбОшибке);
				Продолжить;
			КонецЕсли;
			
			СоздатьДокументpkcs7(ТокенДляПодписанияДокументов,ЗначениеКонтентаСтрокой);
			
			ДополнительныеПараметры = Новый Структура("Токен",ПолучитьТокенИНН("КлючСервераЭДО"));
			РезультатДокумента = ОбработатьЗапрос("ПолучитьСчетФактуру",ДополнительныеПараметры,"",УникальныйИдентификатор);
			Если РезультатДокумента.КодСостояния = 200 Тогда
				УстановитьСтатусДокументаЭДОВАрхив(ДокументСсылка,УникальныйИдентификатор,СтатусПодписан()); 
				СтрокаТЧ.Статус = СтатусПодписан();
			КонецЕсли;
			
		КонецЕсли; 
		
	Конеццикла;
	
КонецПроцедуры

Процедура ОтправкаДокументовНаЧерновик(ТипДокумента) Экспорт
	
	Для каждого СтрокаТЧ из ТабличнаяЧастьПодписаниеДокументов цикл
		
		Если СтрокаТЧ.Выгружать тогда
			
			ДокументСсылка = СтрокаТЧ.Документ;
			Данные = ПолучитьДанныеДокументаСчетФактурыЭДО(ДокументСсылка);
			УникальныйИдентификатор = Данные.УИД;
			Если ОтправленВЧерновик(ДокументСсылка,УникальныйИдентификатор,СтрокаТЧ,ТипДокумента) Тогда
				СтрокаТЧ.Статус = СтатусЧерновик();
			КонецЕсли; 
		
		КонецЕсли; 
		
	Конеццикла;
	
КонецПроцедуры

Функция ОтправленВЧерновик(ДокументСсылка,УникальныйИдентификатор,СтрокаТЧ,ТипДокумента)
	
	СтрутураДанных = Новый Структура("Документ,УникИдентификатор",ДокументСсылка,УникальныйИдентификатор);
	
	ДанныеДляОтправки = ВызовТипЗапроста(СтрутураДанных,ТипДокумента);
	
	Если ДанныеДляОтправки.КодСостояния = 200 Тогда
		УстановитьСтатусДокументаЭДОВАрхив(ДокументСсылка,УникальныйИдентификатор,СтатусЧерновик());
		Возврат Истина;
	Иначе
		СообщитьОбОшибкеОбработки(ДанныеДляОтправки.СообщениеОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
 
#Область ЗаказыEDI

Функция ПолучитьСписокЗаказовЭДИОрганизации() Экспорт
	
	ДополнительныеПараметры = Новый Структура("viewer_inn,limit,Токен",ИННВыбраннойОрганизации,"10",ПолучитьТокенИНН("КлючСервераЭДО"));
	Возврат ОбработатьЗапрос("ПолучитьСписокЗаказов",ДополнительныеПараметры);
	
КонецФункции

Процедура ЗапроситьОбработатьСписокЗаказовЭДИОрганизации() Экспорт
	
	РезультатЗаказов = ПолучитьСписокЗаказовЭДИОрганизации();
	Если РезультатЗаказов.КодСостояния = 200 Тогда
		
		СписокВходящихДокументовЭДО = ПрочитатьДанныеJSON(РезультатЗаказов.Содержимое);
		
		ЗаказыEDI.Очистить();
		
		Для каждого СтрокаЭДО Из СписокВходящихДокументовЭДО Цикл
			
			НоваяСтрока = ЗаказыEDI.Добавить();
			ЗаполнитьПараметрыЗаказЭДИ(НоваяСтрока,СтрокаЭДО);
			
		КонецЦикла; 
		
	Иначе
		СообщитьОбОшибкеОбработки(РезультатЗаказов.СообщениеОбОшибке);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗаказЭДИ(СтрокаЭДО,ПараметрыЭДО)
	
	ЗаполнитьЗначенияСвойств(СтрокаЭДО,ПараметрыЭДО);
	СтрокаЭДО.info_number = ПараметрыЭДО.info.number;
	СтрокаЭДО.info_date = ПолучитьДатуИзСтрокиОбработки(ПараметрыЭДО.info.date);
	СтрокаЭДО.contract_number = ПараметрыЭДО.contract.number;
	СтрокаЭДО.contract_date = ПолучитьДатуИзСтрокиОбработки(ПараметрыЭДО.contract.date);
	СтрокаЭДО.branch_id = ПараметрыЭДО.branch.id;
	СтрокаЭДО.branch_name = ПараметрыЭДО.branch.name;
	
	ИнфоПриостановления = ПараметрыЭДО.stop_info;
	СтрокаЭДО.is_stopped = ИнфоПриостановления.is_stopped;
	ЗаполнитьПараметрыЭДО(СтрокаЭДО,ПараметрыЭДО);
	
КонецПроцедуры

Функция ПолучитьАрхивТаблицуСчетФактурЭДО() Экспорт
	
	ПараметрыХранилищеНастроек = ПараметрыХранилищеНастроекАрхивСчетФактур();
	ТаблицаАрхивСчетФактурЭДО = ХранилищеОбщихНастроек.Загрузить(ПараметрыХранилищеНастроек.КлючОбъекта
		,ПараметрыХранилищеНастроек.КлючНастроек,,мПользовательДляСохраненияХранилищеНастроек);
		
	Возврат ТаблицаАрхивСчетФактурЭДО;
	
КонецФункции

Процедура СохранитьТаблицуАрхивСчетФактураЭДО(ТаблицаАрхивСчетФактурЭДО)
	
	ПараметрыХранилищеНастроек = ПараметрыХранилищеНастроекАрхивСчетФактур();
	ХранилищеОбщихНастроек.Сохранить(ПараметрыХранилищеНастроек.КлючОбъекта
		,ПараметрыХранилищеНастроек.КлючНастроек,ТаблицаАрхивСчетФактурЭДО,,мПользовательДляСохраненияХранилищеНастроек);
	
КонецПроцедуры

Функция ПолучитьПустуюТаблицуАрхиСчетФактурыЭДО(ВидДокумента) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Статус",Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить(ДокументПолеТабличнойЧастиАрхива(),Новый ОписаниеТипов("ДокументСсылка."+ВидДокумента));
	Результат.Колонки.Добавить("УИД",Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеДокументаСчетФактурыЭДО(ДокументСсылка)
	
	Результат = Новый Структура("УИД,Статус",ПолучитьНовыйУИДДляЭДО(),"Не отправлен");
	
	ТаблицаАрхивСчетФактурЭДО = ПолучитьАрхивТаблицуСчетФактурЭДО();
	Если ТаблицаАрхивСчетФактурЭДО = Неопределено Тогда
		Возврат Результат;
	КонецЕсли; 
	
	НайденнаяСтрока = ТаблицаАрхивСчетФактурЭДО.Найти(ДокументСсылка,ДокументПолеТабличнойЧастиАрхива());
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Результат,НайденнаяСтрока);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьСтатусДокументаЭДОВАрхив(ДокументСсылка,УИД,Статус)
	
	ТаблицаАрхивСчетФактурЭДО = ПолучитьАрхивТаблицуСчетФактурЭДО();
	Если ТаблицаАрхивСчетФактурЭДО = Неопределено Тогда
		ТаблицаАрхивСчетФактурЭДО = ПолучитьПустуюТаблицуАрхиСчетФактурыЭДО(ПолучитьВидДокументПоНомеруСтроки(1));
	КонецЕсли; 
	
	НайденнаяСтрока = ТаблицаАрхивСчетФактурЭДО.Найти(ДокументСсылка,ДокументПолеТабличнойЧастиАрхива());
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ТаблицаАрхивСчетФактурЭДО.Добавить();
	КонецЕсли; 
	
	НайденнаяСтрока.Документ = ДокументСсылка;
	НайденнаяСтрока.УИД = УИД;
	НайденнаяСтрока.Статус = Статус;
	
	СохранитьТаблицуАрхивСчетФактураЭДО(ТаблицаАрхивСчетФактурЭДО);
	
КонецПроцедуры

#КонецОбласти 

#Область ДоговорыЭДО

Функция ПолучитьСписокДоговорЭДО()
	
	ДополнительныеПараметры = Новый Структура("Токен",ПолучитьТокенИНН("КлючСервераЭДО"));
	Возврат ОбработатьЗапрос("ПолучитьДоговоров",ДополнительныеПараметры);
	
КонецФункции
 
Процедура ЗапроситьОбработатьСписокДоговоров() Экспорт
	
	РезультатДоговоров = ПолучитьСписокДоговорЭДО();
	Если РезультатДоговоров.КодСостояния = 200 Тогда
		
		СписокДоговоров = ПрочитатьДанныеJSON(РезультатДоговоров.Содержимое);
		
		ДоговорыЭДО.Очистить();
		
		Для каждого СтрокаЭДО Из СписокДоговоров Цикл
			
			НоваяСтрока = ДоговорыЭДО.Добавить();
			ЗаполнитьПараметрыДоговораЭДО(НоваяСтрока,СтрокаЭДО);
			
		КонецЦикла; 
		
	Иначе
		СообщитьОбОшибкеОбработки(РезультатДоговоров.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыДоговораЭДО(СтрокаЭДО,ПараметрыЭДО)
	
	ЗаполнитьЗначенияСвойств(СтрокаЭДО,ПараметрыЭДО);
	ЗаполнитьПараметрыЭДО(СтрокаЭДО,ПараметрыЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область ФилиалыЭДО

Функция ПолучитьСписокФилиаловЭДО()
	
	ДополнительныеПараметры = Новый Структура("Токен",ПолучитьТокенИНН("КлючСервераЭДО"));
	Возврат ОбработатьЗапрос("ПолучитьФилиалов",ДополнительныеПараметры);
	
КонецФункции
 
Процедура ЗапроситьОбработатьСписокФилиалов() Экспорт
	
	РезультатФилиалов = ПолучитьСписокФилиаловЭДО();
	Если РезультатФилиалов.КодСостояния = 200 Тогда
		
		СписокФилиалов = ПрочитатьДанныеJSON(РезультатФилиалов.Содержимое);
		
		ФилиалыЭДО.Очистить();
		
		Для каждого СтрокаЭДО Из СписокФилиалов Цикл
			
			НоваяСтрока = ФилиалыЭДО.Добавить();
			ЗаполнитьПараметрыФилиалЭДО(НоваяСтрока,СтрокаЭДО);
			
		КонецЦикла; 
		
	Иначе
		СообщитьОбОшибкеОбработки(РезультатФилиалов.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыФилиалЭДО(СтрокаЭДО,ПараметрыЭДО)
	
	ЗаполнитьЗначенияСвойств(СтрокаЭДО,ПараметрыЭДО);
	СтрокаЭДО.owner_inn = ПараметрыЭДО.owner.inn;
	СтрокаЭДО.owner_name = ПараметрыЭДО.owner.name;
	
КонецПроцедуры

#КонецОбласти

#Область СчетФактураЭДО

Функция ПолучитьСписокСчетФактурЭДО(ВидСчетФактуры,ДополнительныеПараметры)
	
	Если НЕ ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура();
	КонецЕсли; 
	
	ДополнительныеПараметры.Вставить("Токен",ПолучитьТокенИНН("КлючСервераЭДО"));
	Возврат ОбработатьЗапрос("ПолучитьСписокСчетФактур",ДополнительныеПараметры,ВидСчетФактуры);
	
КонецФункции

Процедура ЗапроситьОбработатьСписокСчетФактураЭДО(ВидСчетФактуры,ДополнительныеПараметры) Экспорт
	
	РезультатСчетФактур = ПолучитьСписокСчетФактурЭДО(ВидСчетФактуры,ДополнительныеПараметры);
	Если РезультатСчетФактур.КодСостояния = 200 Тогда
		
		СписокСчетФактур = ПрочитатьДанныеJSON(РезультатСчетФактур.Содержимое);
		
		СчетФактурыЭДО.Очистить();
		
		Для каждого СтрокаЭДО Из СписокСчетФактур Цикл
			
			НоваяСтрока = СчетФактурыЭДО.Добавить();
			ЗаполнитьПараметрыСчетФактурЭДО(НоваяСтрока,СтрокаЭДО);
			
		КонецЦикла; 
		
	Иначе
		СообщитьОбОшибкеОбработки(РезультатСчетФактур.СообщениеОбОшибке);
	КонецЕсли;

КонецПроцедуры
 
Процедура ЗаполнитьПараметрыСчетФактурЭДО(СтрокаЭДО,ПараметрыЭДО)
	
	ЗаполнитьЗначенияСвойств(СтрокаЭДО,ПараметрыЭДО);
	ЗаполнитьПараметрыЭДО(СтрокаЭДО,ПараметрыЭДО);
	СтрокаЭДО.info_number = ПараметрыЭДО.info.number;
	СтрокаЭДО.info_date = ПолучитьДатуИзСтрокиОбработки(ПараметрыЭДО.info.date);
	СтрокаЭДО.contract_number = ПараметрыЭДО.contract.number;
	СтрокаЭДО.contract_date = ПолучитьДатуИзСтрокиОбработки(ПараметрыЭДО.contract.date);
	СтрокаЭДО.total_info_total = ПараметрыЭДО.total_info.total;
		
КонецПроцедуры

Функция ОбщееКоличествоСчетФактурыЭДО(ВидСчетФактуры) Экспорт
	
	ДополнительныеПараметры = Новый Структура("viewer_inn,Токен",ИННВыбраннойОрганизации,ПолучитьТокенИНН("КлючСервераЭДО"));
	РезультатОбщееКоличество = ОбработатьЗапрос("ПолучитьОбщееКоличествоСчетФактур",ДополнительныеПараметры,ВидСчетФактуры);
	
	Если РезультатОбщееКоличество.КодСостояния = 200 Тогда
		
		Возврат Число(РезультатОбщееКоличество.Содержимое); 
		
	Иначе
		СообщитьОбОшибкеОбработки(РезультатОбщееКоличество.СообщениеОбОшибке);
		Возврат 0;
	КонецЕсли;
	
КонецФункции
 
Функция ПолучитьСчетФактуруЭДО(ВидСчетФактуры,УникальностьСчетФактуры) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Токен",ПолучитьТокенИНН("КлючСервераЭДО"));
	РезультатСчетФактураЭДО = ОбработатьЗапрос("ПолучитьСчетФактуру",ДополнительныеПараметры,ВидСчетФактуры,УникальностьСчетФактуры);
	
	Если РезультатСчетФактураЭДО.КодСостояния = 200 Тогда
		
		Возврат ПрочитатьДанныеJSON(РезультатСчетФактураЭДО.Содержимое); 
		
	Иначе
		СообщитьОбОшибкеОбработки(РезультатСчетФактураЭДО.СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьБинарныеДанныеПечатнойФормыДокумента(УникальностьСчетФактуры,ИмяВременногоФайал) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Токен,Файл,previewType",ПолучитьТокенИНН("КлючСервераЭДО"),ИмяВременногоФайал,"pdf");
	РезультатСчетФактураЭДО = ОбработатьЗапрос("ПолучитьПечаткуСчетФактуры",ДополнительныеПараметры,"",УникальностьСчетФактуры);
	Если РезультатСчетФактураЭДО.КодСостояния = 200 Тогда
		
		Возврат "ОК"; 
		
	Иначе
		СообщитьОбОшибкеОбработки(РезультатСчетФактураЭДО.СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
 
	
КонецФункции
 
#КонецОбласти 

#КонецОбласти 

#Область DocumentBody

Функция ВызовТипЗапроста(СтрутураДанных,тип) Экспорт

	АдресРесурса = ОсновнойПутьПодключенияКСерверу();
	
	Если тип = "invoice" тогда
		ДополнительныеПараметры = ПолучитьТелоДокументаInvoice(СтрутураДанных,тип);
		КлючЗапроса = "СохранитьСчетФактуруВЧерновик";
		АдресРесурса = АдресРесурса + ПолучитьПутьЗапросаПоКлючу(КлючЗапроса,"draft");
	//СтруктураДокументаJson = ЗаписатьДанныеПолучитьJSON(СтруктураДокумента);
	//иначеЕсли тип = "contracts" тогда
	//	BodyJsonText = ПолучитьТелоДокументаContracts(СтрутураДанных);
	//иначеЕсли тип = "empowerment" тогда
	//	BodyJsonText = ПолучитьТелоДокументаEmpowerment(СтрутураДанных);
	//иначеЕсли тип = "waybills" тогда
	//	BodyJsonText = ПолучитьТелоДокументаWaybills(СтрутураДанных);
	//иначеЕсли тип = "verification-acts" тогда
	//	BodyJsonText = ПолучитьТелоДокументаVerification_acts(СтрутураДанных);
	//иначе	
	//	BodyJsonText = ПолучитьТелоДокументаActs(СтрутураДанных);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Токен",ПолучитьТокенИНН("КлючСервераЭДО"));
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 1);
	ПараметрыПолучения.Вставить("Метод"                   , ПолучитьМетодПоЗапросаПоКлючу(КлючЗапроса));
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	
	Если ДополнительныеПараметры.Свойство("Файл") Тогда
		ПараметрыПолучения.Вставить("ИмяФайлаОтвета"      , ДополнительныеПараметры.Файл);
		ДополнительныеПараметры.удалить("Файл");
	КонецЕсли; 
	
	ЗаполнитьПараметрыЗапроса(КлючЗапроса,АдресРесурса,ДополнительныеПараметры,ПараметрыПолучения);
	ЗначениеКонтентаСтрокой = ЗаписатьДанныеПолучитьJSON(ДополнительныеПараметры);
	КонтентСтруктура = ОбернутьВКонтент(ЗначениеКонтентаСтрокой);
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , ЗаписатьДанныеПолучитьJSON(КонтентСтруктура));
	
	РезультатСервера = ЗагрузитьСодержимоеИзИнтернет(АдресРесурса,ПараметрыПолучения);
	РезультатСервера.Вставить("ЗначениеКонтентаСтрокой",ЗначениеКонтентаСтрокой);
	Возврат РезультатСервера;
	
Конецфункции

Функция ОбернутьВКонтент(ЗначениеКонтентаСтрокой)
	
	Контент = ЗначениеКонтентаСтрокой;
	Контент = УдалитьСимволыСтроки(Контент);
	КонтентСтруктура = Новый Структура("content",Контент);
	Возврат КонтентСтруктура;

КонецФункции

Функция УдалитьСимволыСтроки(СтрокаПреобразования) Экспорт
	
	СтрокаПреобразования = СтрЗаменить(СтрокаПреобразования,Символы.ПС,"");
	СтрокаПреобразования = СтрЗаменить(СтрокаПреобразования,Символы.НПП,"");
	СтрокаПреобразования = СтрЗаменить(СтрокаПреобразования,Символы.ВТаб,"");
	СтрокаПреобразования = СтрЗаменить(СтрокаПреобразования,Символы.ВК,"");
	СтрокаПреобразования = СтрЗаменить(СтрокаПреобразования,Символы.ПФ,"");
	Возврат СтрокаПреобразования;
	
КонецФункции
 
Функция ПолучитьТелоДокументаInvoice(СтрутураДанных,ВидДокумента) экспорт
	                                 
	СтруктураТелоДокумента = НОВЫЙ Структура();
	СтруктураТелоДокумента.Вставить("Version",1);
	СтруктураТелоДокумента.Вставить("HasMarking",ложь);
	СтруктураТелоДокумента.Вставить("FacturaType",0);
	СтруктураТелоДокумента.Вставить("SingleSidedType",0);
	СтруктураТелоДокумента.Вставить("IncomeType",0);
	СтруктураТелоДокумента.Вставить("RealizationPurpose",2);
	СтруктураТелоДокумента.Вставить("FacturaId",СтрутураДанных.УникИдентификатор);
	
	СтруктураТелоДокумента.Вставить("FacturaDoc",новый Структура);
	СтруктураТелоДокумента.FacturaDoc.Вставить("FacturaNo",СтрутураДанных.документ.номер);
	СтруктураТелоДокумента.FacturaDoc.Вставить("FacturaDate",Формат(СтрутураДанных.документ.дата,"ДФ=yyyy-MM-dd"));
	                                      
	СтруктураТелоДокумента.Вставить("OldFacturaDoc",);
	
	СтруктураТелоДокумента.Вставить("ContractDoc",новый Структура);
	СтруктураТелоДокумента.ContractDoc.Вставить("ContractNo",СтрутураДанных.документ.номер);
	СтруктураТелоДокумента.ContractDoc.Вставить("ContractDate",Формат(СтрутураДанных.документ.дата,"ДФ=yyyy-MM-dd"));
	
	СтруктураТелоДокумента.Вставить("FacturaEmpowermentDoc",);
	
	СтруктураТелоДокумента.Вставить("ItemReleasedDoc",новый Структура);
	СтруктураТелоДокумента.ItemReleasedDoc.Вставить("ItemReleasedFio",);
	СтруктураТелоДокумента.ItemReleasedDoc.Вставить("ItemReleasedPinfl",);
	
	СтруктураТелоДокумента.Вставить("SellerTin",ИННВыбраннойОрганизации);
	СтруктураТелоДокумента.Вставить("BuyerTin",СтрутураДанных.документ.Контрагент.инн);
	СтруктураТелоДокумента.Вставить("LotId",);
	СтруктураТелоДокумента.Вставить("ContractId",);
	СтруктураТелоДокумента.Вставить("WaybillIds",);
	
	СтруктураТелоДокумента.Вставить("Seller",GetBodySeller(СтрутураДанных));
	СтруктураТелоДокумента.Вставить("Buyer", GetBodyBuyer(СтрутураДанных));
	
	СтруктураТелоДокумента.Вставить("ForeignCompany",);
	                                                      
	СтруктураТелоДокумента.Вставить("ProductList",новый Структура);
	СтруктураТелоДокумента.ProductList.Вставить("FacturaProductId",СтрутураДанных.УникИдентификатор);
	СтруктураТелоДокумента.ProductList.Вставить("Tin",ИННВыбраннойОрганизации);
	СтруктураТелоДокумента.ProductList.Вставить("HasVat",Истина);
	СтруктураТелоДокумента.ProductList.Вставить("HasExcise",Ложь);
	СтруктураТелоДокумента.ProductList.Вставить("HasCommittent",Ложь);
	СтруктураТелоДокумента.ProductList.Вставить("HasLgota",Ложь);
	СтруктураТелоДокумента.ProductList.Вставить("HideReportCommittent",Ложь);
	СтруктураТелоДокумента.ProductList.Вставить("HasMedical",Ложь);
	
	СтруктураТелоДокумента.ProductList.Вставить("Products",GetBodyProducts(СтрутураДанных,ВидДокумента));
	
	Возврат СтруктураТелоДокумента;
	
КонецФункции

Функция GetBodySeller(СтрутураДанных)
	
	Организация = ПолучитьОрганизациюПоУмолчанию();
	SellerСтруктура = новый Структура(); 
	
	SellerСтруктура.Вставить("Name",Организация.Наименование);
	SellerСтруктура.Вставить("Account",СокрЛП(Организация.ОсновнойБанковскийСчет.НомерСчета));
	SellerСтруктура.Вставить("BankId",СокрЛП(Организация.ОсновнойБанковскийСчет.Банк.Код));
	SellerСтруктура.Вставить("Address",Организация.ОсновнойБанковскийСчет.Банк.Город);
	SellerСтруктура.Вставить("Oked",Организация.КодОКВЭД);
	SellerСтруктура.Вставить("Director",Организация.ИндивидуальныйПредприниматель.наименование);
	SellerСтруктура.Вставить("Accountant",Организация.ИндивидуальныйПредприниматель.наименование);
	SellerСтруктура.Вставить("VatRegCode",Организация.РегистрационныйКодПлательщикаНДС);
	SellerСтруктура.Вставить("VatRegStatus",20);
	SellerСтруктура.Вставить("BranchCode","");
	SellerСтруктура.Вставить("BranchName","");
	SellerСтруктура.Вставить("TaxGap",);
	SellerСтруктура.Вставить("Category",1);
	
	Возврат SellerСтруктура;
	
Конецфункции

Функция GetBodyBuyer(СтрутураДанных)
	
	БанковскийСчет = ПолучитьОсновнойБанковскийСчет(СтрутураДанных.Документ.контрагент);
	
	СтруктураBodyBuyer = Новый Структура();
		
	СтруктураBodyBuyer.Вставить("Name",СтрутураДанных.Документ.контрагент.НаименованиеПолное);
	СтруктураBodyBuyer.Вставить("Account",СокрЛП(БанковскийСчет.НомерСчета));
	СтруктураBodyBuyer.Вставить("BankId",СокрЛП(БанковскийСчет.Банк.Код));
	СтруктураBodyBuyer.Вставить("Address",БанковскийСчет.Банк.адрес);
	СтруктураBodyBuyer.Вставить("Oked",СтрутураДанных.Документ.контрагент.КодОКВЭД);
	СтруктураBodyBuyer.Вставить("Director",);
	СтруктураBodyBuyer.Вставить("Accountant",);
	СтруктураBodyBuyer.Вставить("VatRegCode",СтрутураДанных.Документ.контрагент.РегистрационныйКодПлательщикаНДС);
	СтруктураBodyBuyer.Вставить("VatRegStatus",20);
	СтруктураBodyBuyer.Вставить("BranchCode",);
	СтруктураBodyBuyer.Вставить("BranchName",);
	СтруктураBodyBuyer.Вставить("TaxGap",);
	
	//ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрутураДанных.Документ,"контрагент");
	Возврат СтруктураBodyBuyer;
	
Конецфункции

Функция OtherRequisites(СтрутураДанных)
	
	OtherRequisitesСтруктура = Новый Структура();
	OtherRequisitesСтруктура.Вставить("SingleSidedType",);
	OtherRequisitesСтруктура.Вставить("IncomeType",);
	
КонецФункции

Функция ПолучитьОсновнойБанковскийСчет(контрагент)
	
	Запрос = новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	БанковскиеСчета.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец",контрагент);
	
	результат = Запрос.Выполнить().Выбрать();
	
	Пока результат.Следующий() цикл
		Возврат результат.ссылка;
	Конеццикла;
	
	Возврат Неопределено;
	
Конецфункции

Функция GetBodyProducts(СтрутураДанных,ВидДокумента)
	
	МассивBodyProducts = новый Массив();
	
	ТабЧасть = СтрутураДанных.Документ.Товары.выгрузить();	
	
	для каждого стрТов из ТабЧасть цикл
		СтруктураBodyProducts = Новый Структура();
		
		СтруктураBodyProducts.Вставить("OrdNo",стрТов.НомерСтроки);
		СтруктураBodyProducts.Вставить("CatalogCode",стрТов.Номенклатура.ИКПУКод);
		СтруктураBodyProducts.Вставить("CatalogName",стрТов.Номенклатура.ИКПУНаименование);
		СтруктураBodyProducts.Вставить("Barcode",);
		СтруктураBodyProducts.Вставить("LgotaId",);
		СтруктураBodyProducts.Вставить("LgotaName",);
		СтруктураBodyProducts.Вставить("LgotaVatSum",0);
		СтруктураBodyProducts.Вставить("LgotaType",);
		СтруктураBodyProducts.Вставить("Name",стрТов.Номенклатура.НаименованиеПолное);
		СтруктураBodyProducts.Вставить("Serial",);
		СтруктураBodyProducts.Вставить("MeasureId",);
		СтруктураBodyProducts.Вставить("PackageCode",стрТов.Номенклатура.УпаковкаКод);
		СтруктураBodyProducts.Вставить("PackageName",стрТов.Номенклатура.УпаковкаНаименование);
		СтруктураBodyProducts.Вставить("BaseSumma",0);
		СтруктураBodyProducts.Вставить("ProfitRate",0);
		СтруктураBodyProducts.Вставить("Count",стрТов.Количество);
		СтруктураBodyProducts.Вставить("CountTon",0);
		СтруктураBodyProducts.Вставить("CountKilometer",0);
		СтруктураBodyProducts.Вставить("Summa",стрТов.Цена);
		СтруктураBodyProducts.Вставить("DeliverySum",стрТов.Количество * стрТов.Цена);
		СтруктураBodyProducts.Вставить("VatRate",ПолучитьСтавкуНДС(стрТов.СтавкаНДС)); 
		СтруктураBodyProducts.Вставить("VatSum",стрТов.СуммаНДС);
		СтруктураBodyProducts.Вставить("DeliverySumWithVat",стрТов.СуммаНДС + СтруктураBodyProducts.DeliverySum);
		СтруктураBodyProducts.Вставить("WithoutVat",стрТов.СуммаНДС <= 0);
		СтруктураBodyProducts.Вставить("WarehouseId",);
		
		МассивBodyProducts.Добавить(СтруктураBodyProducts);
	Конеццикла;
	
	
	
	Возврат МассивBodyProducts;
	
Конецфункции

Функция ПолучитьСтавкуНДС(СтавкаНДС)
	
	Результат = Строка(СтавкаНДС);
	Результат = СтрЗаменить(Результат,"%","");
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

мИмяФайлаКомпоненты = "e-imzo-component.jar";
мПользовательДляСохраненияХранилищеНастроек = "Администратор";
ЧитатьВСоответствие = Ложь;